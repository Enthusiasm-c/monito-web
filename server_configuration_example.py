"""
–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
"""

# –ü—Ä–∏–º–µ—Ä –º–∞–ø–ø–∏–Ω–≥–∞ user_id –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
USER_RESTAURANT_MAPPING_EXAMPLE = {
    # Telegram user_id: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
    123456789: "–†–µ—Å—Ç–æ—Ä–∞–Ω '–°–æ–ª–Ω–µ—á–Ω—ã–π –±–µ—Ä–µ–≥'",
    987654321: "–ö–∞—Ñ–µ '–£—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫'", 
    555666777: "–ë–∏—Å—Ç—Ä–æ '–ë—ã—Å—Ç—Ä—ã–π –æ–±–µ–¥'",
    444555666: "–ü–∏—Ü—Ü–µ—Ä–∏—è '–ú–∞–º–∞ –ú–∏—è'",
    333444555: "–°—É—à–∏-–±–∞—Ä '–¢–æ–∫–∏–æ'",
    222333444: "–°—Ç–æ–ª–æ–≤–∞—è '–î–æ–º–∞—à–Ω—è—è –∫—É—Ö–Ω—è'",
    111222333: "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è '–°–ª–∞–¥–∫–∏–π —Ä–∞–π'",
    999888777: "–ë–∞—Ä '–°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥'",
    888777666: "–†–µ—Å—Ç–æ—Ä–∞–Ω '–ì—É—Ä–º–∞–Ω'",
    777666555: "–ö–∞—Ñ–µ '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ'"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:
SETUP_INSTRUCTIONS = """
üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê

1. –ù–∞–π–¥–∏—Ç–µ user_id –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
   - –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ—Ç–∞: logger.info(f"User ID: {message.from_user.id}")
   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @userinfobot –≤ Telegram

2. –ó–∞–º–µ–Ω–∏—Ç–µ USER_RESTAURANT_MAPPING –≤ —Ñ–∞–π–ª–µ invoice_scan.py:
   
   USER_RESTAURANT_MAPPING = {
       123456789: "–í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω 1",
       987654321: "–í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω 2", 
       # ... –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –≤–∞—à–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
   }

3. –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è user_id:
   
   @router.message(F.text == "/my_id")
   async def get_user_id(message: types.Message):
       await message.answer(f"–í–∞—à ID: {message.from_user.id}")

4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
   
   # –í –ª–æ–≥–∞—Ö –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è:
   # "Monitoring system initialized successfully"
   # "User 123456789 (–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞) sent a photo for processing"

5. –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫:
   
   cat /root/monitoring/bot_metrics.json
   
6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ–±–∞–≤—å—Ç–µ –≤ –±–æ—Ç–∞):
   
   @router.message(F.text == "/stats")
   async def get_stats(message: types.Message):
       if message.from_user.id in ADMIN_IDS:  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
           stats = await get_monitoring_stats(7)  # –∑–∞ 7 –¥–Ω–µ–π
           await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
"""

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
ADMIN_STATS_HANDLER_EXAMPLE = '''
from ..handlers.invoice_scan import get_monitoring_stats

@router.message(F.text.startswith("/stats"))
async def admin_stats(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö user_id
    ADMIN_IDS = [123456789, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 7 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        parts = message.text.split()
        days = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 7
        
        stats = await get_monitoring_stats(days)
        
        if "error" in stats:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π*

üî¢ *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {stats.get('total_sessions', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_sessions', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('success_rate', 0):.1f}%
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {stats.get('total_products_processed', 0)}
‚Ä¢ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {stats.get('total_savings', 0):.2f} —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.get('average_duration', 0):.2f} —Å–µ–∫.

üè™ *–ü–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º:*
"""
        
        restaurant_stats = stats.get('restaurant_statistics', {})
        for restaurant, data in restaurant_stats.items():
            response += f"""
‚Ä¢ *{restaurant}*
  –°–µ—Å—Å–∏–π: {data['sessions']}
  –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {data['products']}
  –≠–∫–æ–Ω–æ–º–∏—è: {data['savings']:.2f} —Ä—É–±.
  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {data['avg_duration']:.2f} —Å–µ–∫.
"""
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
'''

if __name__ == "__main__":
    print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 40)
    print("\nüó∫Ô∏è –ü—Ä–∏–º–µ—Ä –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user_id, restaurant in list(USER_RESTAURANT_MAPPING_EXAMPLE.items())[:5]:
        print(f"  {user_id}: \"{restaurant}\"")
    print("  ...")
    
    print(SETUP_INSTRUCTIONS)
    
    print("\nüìÅ –§–∞–π–ª—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
    print("  /root/monito-web-deploy/telegram-bot/app/handlers/invoice_scan.py")
    print("    - –ó–∞–º–µ–Ω–∏—Ç–µ USER_RESTAURANT_MAPPING –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
    print("  /root/monito-web-deploy/telegram-bot/app/handlers/start.py") 
    print("    - –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!")
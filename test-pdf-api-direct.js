#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP API –≤—ã–∑–æ–≤
 * –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ TypeScript
 */

const https = require('https');
const http = require('http');

async function makeRequest(options, postData) {
  return new Promise((resolve, reject) => {
    const protocol = options.port === 443 ? https : http;
    const req = protocol.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve({ statusCode: res.statusCode, data: result });
        } catch (e) {
          resolve({ statusCode: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (postData) {
      req.write(postData);
    }

    req.end();
  });
}

async function testPdfApiDirect() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PDF –ß–ï–†–ï–ó HTTP API');
  console.log('==================================');
  console.log('');

  const fileUrl = 'https://cdc1w79ssc4kg6xh.public.blob.vercel-storage.com/Island%20Organics%20Bali-wfQOZrvhymEkhEcTw2UjMLYurMsyUC.pdf';
  const fileName = 'Island Organics Bali.pdf';

  console.log(`üìÅ –§–∞–π–ª: ${fileName}`);
  console.log(`üîó URL: ${fileUrl}`);
  console.log('');

  try {
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const boundary = '----formdata-boundary-' + Math.random().toString(36);
    const formData = [
      `--${boundary}`,
      'Content-Disposition: form-data; name="fileUrl"',
      '',
      fileUrl,
      `--${boundary}`,
      'Content-Disposition: form-data; name="fileName"',
      '',
      fileName,
      `--${boundary}`,
      'Content-Disposition: form-data; name="direct"',
      '',
      'true',
      `--${boundary}--`
    ].join('\r\n');

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    
    const startTime = Date.now();

    // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É
    const options = {
      hostname: '209.38.85.196',
      port: 3000,
      path: '/api/test-pdf-direct',
      method: 'POST',
      headers: {
        'Content-Type': `multipart/form-data; boundary=${boundary}`,
        'Content-Length': Buffer.byteLength(formData)
      }
    };

    console.log('üìû –í—ã–∑—ã–≤–∞–µ–º API...');
    const result = await makeRequest(options, formData);
    
    const endTime = Date.now();
    const totalTime = endTime - startTime;

    console.log('');
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ API –í–´–ó–û–í–ê:');
    console.log('========================');
    console.log('  üì° HTTP —Å—Ç–∞—Ç—É—Å:', result.statusCode);
    console.log('  ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', totalTime + 'ms (' + (totalTime/1000).toFixed(1) + 's)');
    console.log('');

    if (result.statusCode === 200 && result.data) {
      console.log('  üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:', result.data.products?.length || 0);
      console.log('  ü§ñ –ú–µ—Ç–æ–¥:', result.data.extractionMethods?.bestMethod || 'N/A');
      console.log('  ‚ùå –û—à–∏–±–∫–∏:', result.data.errors?.length || 0);
      console.log('  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $' + (result.data.costUsd || '0.00'));
      console.log('  ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', (result.data.processingTimeMs || 0) + 'ms');
      
      if (result.data.errors && result.data.errors.length > 0) {
        console.log('');
        console.log('‚ùå –û–®–ò–ë–ö–ò:');
        result.data.errors.slice(0, 5).forEach((error, i) => {
          console.log('  ' + (i+1) + '. ' + error);
        });
      }

      if (result.data.products && result.data.products.length > 0) {
        console.log('');
        console.log('‚úÖ –ü–ï–†–í–´–ï –ü–†–û–î–£–ö–¢–´:');
        result.data.products.slice(0, 3).forEach((product, i) => {
          console.log('  ' + (i+1) + '. ' + (product.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π') + ' - ' + (product.price || 'No price'));
        });
      }

      console.log('');
      console.log('üéâ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    } else {
      console.log('‚ùå API Error:', result.data);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
if (require.main === module) {
  testPdfApiDirect().catch(error => {
    console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
    process.exit(1);
  });
}

module.exports = { testPdfApiDirect };
const fs = require('fs');

console.log('üìã –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞...\n');

try {
  const log = fs.readFileSync('/Users/denisdomashenko/monito-web/server.log', 'utf8');
  const lines = log.split('\n');
  
  // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON –±–ª–æ–∫
  let jsonStart = -1;
  let jsonEnd = -1;
  
  for (let i = lines.length - 1; i >= 0; i--) {
    if (lines[i].includes('=== ENHANCED_JSON_END ===')) {
      jsonEnd = i;
    }
    if (lines[i].includes('=== ENHANCED_JSON_START ===') && jsonEnd > 0) {
      jsonStart = i + 1;
      break;
    }
  }
  
  if (jsonStart === -1 || jsonEnd === -1) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON –±–ª–æ–∫ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏');
    process.exit(1);
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º JSON
  let jsonText = '';
  for (let i = jsonStart; i < jsonEnd; i++) {
    const line = lines[i];
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ª–æ–≥–æ–≤
    const cleanLine = line.replace(/^\s*\d+‚Üí/, '').replace(/^üì§ Python output: /, '');
    jsonText += cleanLine + '\n';
  }
  
  // –ü–∞—Ä—Å–∏–º JSON
  const data = JSON.parse(jsonText);
  const products = data.products || [];
  
  console.log(`üéØ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n`);
  console.log('üìã –°–ü–ò–°–û–ö –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –ü–†–û–î–£–ö–¢–û–í:\n');
  console.log('=' .repeat(80));
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const productsByPage = {};
  products.forEach(product => {
    const page = product.source_page || 'unknown';
    if (!productsByPage[page]) {
      productsByPage[page] = [];
    }
    productsByPage[page].push(product);
  });
  
  // –í—ã–≤–æ–¥–∏–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  Object.keys(productsByPage).sort((a, b) => parseInt(a) - parseInt(b)).forEach(page => {
    console.log(`\nüìÑ –°–¢–†–ê–ù–ò–¶–ê ${page} (${productsByPage[page].length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤):`);
    console.log('-'.repeat(50));
    
    productsByPage[page].forEach((product, index) => {
      const price = new Intl.NumberFormat('id-ID', { 
        style: 'currency', 
        currency: 'IDR',
        minimumFractionDigits: 0
      }).format(product.price);
      
      const size = product.size ? ` (${product.size})` : '';
      const priceType = product.price_type ? ` [${product.price_type}]` : '';
      const notes = product.notes ? ` | ${product.notes}` : '';
      
      console.log(`${String(index + 1).padStart(2)}. ${product.name}${size}`);
      console.log(`    üí∞ ${price} per ${product.unit || 'unit'}${priceType}${notes}`);
    });
  });
  
  console.log('\n' + '='.repeat(80));
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const priceTypes = {};
  const categories = {};
  const units = {};
  
  products.forEach(product => {
    const priceType = product.price_type || 'unknown';
    const unit = product.unit || 'unknown';
    
    priceTypes[priceType] = (priceTypes[priceType] || 0) + 1;
    units[unit] = (units[unit] || 0) + 1;
  });
  
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:');
  console.log(`   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
  console.log(`   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Object.keys(productsByPage).length}`);
  
  console.log('\nüí∞ –¢–∏–ø—ã —Ü–µ–Ω:');
  Object.entries(priceTypes).forEach(([type, count]) => {
    console.log(`   ${type}: ${count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
  });
  
  console.log('\nüìè –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:');
  Object.entries(units).forEach(([unit, count]) => {
    console.log(`   ${unit || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}: ${count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
  });
  
  // –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
  const prices = products.map(p => p.price).filter(p => p > 0);
  if (prices.length > 0) {
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
    
    console.log('\nüíµ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:');
    console.log(`   –ú–∏–Ω–∏–º—É–º: ${new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(minPrice)}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º: ${new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(maxPrice)}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(avgPrice)}`);
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error.message);
}
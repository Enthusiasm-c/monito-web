const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';

// –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞)
const alreadyUploaded = [
  '0z britts 1 04_07.pdf',
  'AF Seafood 03_07.pdf', 
  'Bali diary 05_07 .pdf',
  'Benoa fish market 03_07.pdf'
];

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
const supportedExtensions = ['.pdf', '.xlsx', '.xls', '.csv', '.jpg', '.jpeg', '.png'];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
const uploadResults = {
  total: 0,
  successful: 0,
  failed: 0,
  skipped: 0,
  suppliers: {},
  errors: [],
  timeline: []
};

async function bulkUploadRemainingFiles() {
  try {
    console.log('üè¢ –ú–ê–°–°–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –û–°–¢–ê–í–®–ò–•–°–Ø –§–ê–ô–õ–û–í –ü–û–°–¢–ê–í–©–ò–ö–û–í');
    console.log('=' .repeat(70));
    console.log(`üìÅ –ü–∞–ø–∫–∞: ${supplierFolderPath}`);
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    const files = fs.readdirSync(supplierFolderPath);
    const supportedFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return supportedExtensions.includes(ext);
    });
    
    // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const remainingFiles = supportedFiles.filter(file => !alreadyUploaded.includes(file));
    
    console.log(`üìã –í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${supportedFiles.length}`);
    console.log(`‚úÖ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${alreadyUploaded.length}`);
    console.log(`üì• –ö –∑–∞–≥—Ä—É–∑–∫–µ: ${remainingFiles.length}`);
    
    if (remainingFiles.length === 0) {
      console.log('‚ú® –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ Excel, –ø–æ—Ç–æ–º PDF (Excel –±—ã—Å—Ç—Ä–µ–µ)
    const excelFiles = remainingFiles.filter(f => f.toLowerCase().endsWith('.xlsx') || f.toLowerCase().endsWith('.xls'));
    const pdfFiles = remainingFiles.filter(f => f.toLowerCase().endsWith('.pdf'));
    const imageFiles = remainingFiles.filter(f => f.toLowerCase().match(/\.(jpg|jpeg|png)$/));
    const docxFiles = remainingFiles.filter(f => f.toLowerCase().endsWith('.docx'));
    
    const sortedFiles = [...excelFiles, ...imageFiles, ...docxFiles, ...pdfFiles];
    
    console.log('\nüìã –ü–õ–ê–ù –ó–ê–ì–†–£–ó–ö–ò:');
    console.log(`üìä Excel —Ñ–∞–π–ª—ã: ${excelFiles.length}`);
    console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageFiles.length}`);  
    console.log(`üìù DOCX —Ñ–∞–π–ª—ã: ${docxFiles.length}`);
    console.log(`üìÑ PDF —Ñ–∞–π–ª—ã: ${pdfFiles.length}`);
    
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£...\n');
    uploadResults.total = sortedFiles.length;
    
    const startTime = Date.now();
    
    // –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
    for (let i = 0; i < sortedFiles.length; i++) {
      const file = sortedFiles[i];
      const supplierName = extractSupplierName(file);
      const fileType = getFileType(file);
      
      console.log(`üìÑ [${i+1}/${sortedFiles.length}] ${file}`);
      console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplierName}`);
      console.log(`üìã –¢–∏–ø: ${fileType}`);
      
      try {
        const result = await uploadSingleFile(file, supplierName);
        
        uploadResults.timeline.push({
          file,
          supplier: supplierName,
          type: fileType,
          timestamp: new Date().toISOString(),
          ...result
        });
        
        if (result.success) {
          uploadResults.successful++;
          
          if (!uploadResults.suppliers[supplierName]) {
            uploadResults.suppliers[supplierName] = {
              files: 0,
              products: 0,
              avgTime: 0,
              times: [],
              types: []
            };
          }
          
          uploadResults.suppliers[supplierName].files++;
          uploadResults.suppliers[supplierName].products += result.productsCount;
          uploadResults.suppliers[supplierName].times.push(result.processingTime);
          uploadResults.suppliers[supplierName].types.push(fileType);
          uploadResults.suppliers[supplierName].avgTime = Math.round(
            uploadResults.suppliers[supplierName].times.reduce((a, b) => a + b, 0) / 
            uploadResults.suppliers[supplierName].times.length
          );
          
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.productsCount} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${Math.round(result.processingTime/1000)}s`);
        } else {
          uploadResults.failed++;
          uploadResults.errors.push({
            file,
            supplier: supplierName,
            type: fileType,
            error: result.error
          });
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
      } catch (error) {
        uploadResults.failed++;
        uploadResults.errors.push({
          file,
          supplier: supplierName,
          type: fileType,
          error: error.message
        });
        console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      }
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      const remaining = sortedFiles.length - (i + 1);
      const avgTimePerFile = elapsed / (i + 1);
      const estimatedRemaining = Math.round(remaining * avgTimePerFile);
      
      console.log(`   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ: ${elapsed}s | –û—Å—Ç–∞–ª–æ—Å—å: ~${estimatedRemaining}s | –§–∞–π–ª–æ–≤: ${remaining}`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ (–∫–æ—Ä–æ—á–µ –¥–ª—è Excel, –¥–æ–ª—å—à–µ –¥–ª—è PDF)
      const pauseTime = fileType === 'Excel' ? 1000 : 3000;
      console.log(`   ‚è≥ –ü–∞—É–∑–∞ ${pauseTime/1000}s...\n`);
      await sleep(pauseTime);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const totalTime = Math.round((Date.now() - startTime) / 1000);
    generateFinalReport(totalTime);
    
    return uploadResults;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
  }
}

function generateFinalReport(totalTime) {
  console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ê–°–°–û–í–û–ô –ó–ê–ì–†–£–ó–ö–ò');
  console.log('=' .repeat(70));
  console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor(totalTime/60)}–º ${totalTime%60}—Å`);
  console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${uploadResults.total}`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${uploadResults.successful}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${uploadResults.failed}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((uploadResults.successful / uploadResults.total) * 100)}%`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
  const typeStats = {};
  uploadResults.timeline.forEach(entry => {
    if (!typeStats[entry.type]) {
      typeStats[entry.type] = { count: 0, successful: 0, totalProducts: 0, totalTime: 0 };
    }
    typeStats[entry.type].count++;
    if (entry.success) {
      typeStats[entry.type].successful++;
      typeStats[entry.type].totalProducts += entry.productsCount || 0;
      typeStats[entry.type].totalTime += entry.processingTime || 0;
    }
  });
  
  console.log('\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:');
  Object.entries(typeStats).forEach(([type, stats]) => {
    const avgTime = stats.successful > 0 ? Math.round(stats.totalTime / stats.successful / 1000) : 0;
    const avgProducts = stats.successful > 0 ? Math.round(stats.totalProducts / stats.successful) : 0;
    console.log(`${type}: ${stats.successful}/${stats.count} —Ñ–∞–π–ª–æ–≤, ~${avgTime}s, ~${avgProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
  });
  
  console.log('\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:');
  const sortedSuppliers = Object.entries(uploadResults.suppliers)
    .sort(([,a], [,b]) => b.products - a.products);
  
  sortedSuppliers.slice(0, 10).forEach(([supplier, stats]) => {
    console.log(`üìä ${supplier}:`);
    console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${stats.files} | üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${stats.products} | ‚è±Ô∏è ${stats.avgTime}ms`);
    console.log(`   üìã –¢–∏–ø—ã: ${[...new Set(stats.types)].join(', ')}`);
  });
  
  if (uploadResults.failed > 0) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
    uploadResults.errors.forEach(error => {
      console.log(`   ${error.file} (${error.supplier}, ${error.type}): ${error.error}`);
    });
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  const reportFile = `bulk-supplier-upload-report-${Date.now()}.json`;
  fs.writeFileSync(reportFile, JSON.stringify(uploadResults, null, 2));
  console.log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
  
  // –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
  const summary = {
    timestamp: new Date().toISOString(),
    totalFiles: uploadResults.total,
    successful: uploadResults.successful,
    failed: uploadResults.failed,
    successRate: Math.round((uploadResults.successful / uploadResults.total) * 100),
    totalProcessingTime: totalTime,
    totalProductsExtracted: Object.values(uploadResults.suppliers).reduce((sum, s) => sum + s.products, 0),
    newSuppliersCreated: Object.keys(uploadResults.suppliers).length,
    typeBreakdown: typeStats
  };
  
  fs.writeFileSync('bulk-upload-summary.json', JSON.stringify(summary, null, 2));
  console.log(`üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: bulk-upload-summary.json`);
}

async function uploadSingleFile(fileName, supplierName) {
  try {
    const filePath = path.join(supplierFolderPath, fileName);
    const fileBuffer = fs.readFileSync(filePath);
    const mimeType = getMimeType(fileName);
    
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: fileName,
      contentType: mimeType
    });
    form.append('supplierName', supplierName);
    
    const startTime = Date.now();
    
    const response = await fetch('http://localhost:3000/api/upload-unified', {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
      timeout: 180000 // 3 –º–∏–Ω—É—Ç—ã
    });
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    if (!response.ok) {
      const errorText = await response.text();
      return {
        success: false,
        error: `HTTP ${response.status}: ${errorText.substring(0, 100)}...`,
        processingTime
      };
    }
    
    const result = await response.json();
    
    return {
      success: true,
      processingTime,
      productsCount: result.stats?.productsExtracted || 0,
      data: result
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message,
      processingTime: 0
    };
  }
}

function extractSupplierName(fileName) {
  let name = fileName.replace(/\.(pdf|xlsx|xls|csv|jpg|jpeg|png|docx)$/i, '');
  name = name.replace(/\s+\d{2}_\d{2}.*$/, '');
  name = name.replace(/\s+\d+$/, '');
  name = name.trim()
    .replace(/\s+/g, ' ')
    .replace(/^(PT\.?|CV)\s*/i, '')
    .replace(/\+/g, ' ')
    .toLowerCase()
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  return name;
}

function getFileType(fileName) {
  const ext = path.extname(fileName).toLowerCase();
  if (['.xlsx', '.xls'].includes(ext)) return 'Excel';
  if (ext === '.pdf') return 'PDF';
  if (['.jpg', '.jpeg', '.png'].includes(ext)) return 'Image';
  if (ext === '.docx') return 'DOCX';
  if (ext === '.csv') return 'CSV';
  return 'Unknown';
}

function getMimeType(fileName) {
  const ext = path.extname(fileName).toLowerCase();
  const mimeTypes = {
    '.pdf': 'application/pdf',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.csv': 'text/csv',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  };
  return mimeTypes[ext] || 'application/octet-stream';
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏
bulkUploadRemainingFiles();
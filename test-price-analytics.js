/**
 * Test script to verify price analytics functionality
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function testPriceAnalytics() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò –¶–ï–ù');
    console.log('=' .repeat(50));
    
    // –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
    console.log('1. üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω...');
    
    const productsWithHistory = await prisma.product.findMany({
      include: {
        priceHistory: {
          select: {
            id: true,
            price: true,
            createdAt: true,
            supplier: {
              select: {
                name: true
              }
            }
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 5
        },
        prices: {
          where: {
            validTo: null
          },
          select: {
            amount: true,
            supplier: {
              select: {
                name: true
              }
            }
          }
        }
      },
      where: {
        AND: [
          {
            priceHistory: {
              some: {}
            }
          },
          {
            prices: {
              some: {
                validTo: null
              }
            }
          }
        ]
      },
      take: 3
    });
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${productsWithHistory.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω`);
    
    for (const product of productsWithHistory) {
      console.log(`\n2. üìä –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`);
      console.log(`   ID: ${product.id}`);
      console.log(`   –¢–µ–∫—É—â–∏—Ö —Ü–µ–Ω: ${product.prices.length}`);
      console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${product.priceHistory.length}`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
      if (product.priceHistory.length > 0) {
        console.log('   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:');
        product.priceHistory.forEach((history, index) => {
          const date = history.createdAt.toLocaleDateString();
          const price = parseInt(history.price).toLocaleString();
          const supplier = history.supplier.name;
          console.log(`   ${index + 1}. ${date} - ${price} IDR (${supplier})`);
        });
      }
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
      if (product.prices.length > 0) {
        console.log('   üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:');
        product.prices.forEach((price, index) => {
          const amount = parseInt(price.amount).toLocaleString();
          const supplier = price.supplier.name;
          console.log(`   ${index + 1}. ${amount} IDR (${supplier})`);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
      
      const recentHistory = await prisma.priceHistory.count({
        where: {
          productId: product.id,
          createdAt: {
            gte: sixMonthsAgo
          }
        }
      });
      
      console.log(`   üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${recentHistory} –∑–∞–ø–∏—Å–µ–π`);
      
      if (recentHistory > 0 || product.prices.length > 0) {
        console.log(`   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`);
      } else {
        console.log(`   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`);
      }
      
      console.log('   ' + '-'.repeat(40));
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ
    console.log('\n3. üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
    
    const totalProducts = await prisma.product.count();
    const productsWithPrices = await prisma.product.count({
      where: {
        prices: {
          some: {
            validTo: null
          }
        }
      }
    });
    const totalPriceHistory = await prisma.priceHistory.count();
    const totalSuppliers = await prisma.supplier.count();
    
    console.log(`   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`);
    console.log(`   üí∞ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${productsWithPrices}`);
    console.log(`   üìà –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${totalPriceHistory}`);
    console.log(`   üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${totalSuppliers}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
    console.log('\n4. üèÜ –¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω):');
    
    const supplierActivity = await prisma.priceHistory.groupBy({
      by: ['supplierId'],
      _count: {
        id: true
      },
      orderBy: {
        _count: {
          id: 'desc'
        }
      },
      take: 5
    });
    
    for (const activity of supplierActivity) {
      const supplier = await prisma.supplier.findUnique({
        where: { id: activity.supplierId },
        select: { name: true }
      });
      
      console.log(`   üìä ${supplier?.name || 'Unknown'}: ${activity._count.id} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    }
    
    console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
    console.log('üìñ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ProductPriceChart');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testPriceAnalytics();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  },
  log: ['query', 'info', 'warn', 'error']
});

async function diagnoseDatabasePerformance() {
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('=' .repeat(70));
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('1. üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const startConnect = Date.now();
    await prisma.$connect();
    const connectTime = Date.now() - startConnect;
    console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${connectTime}ms`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log('\\n2. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü...');
    
    const tables = [
      { name: 'products', model: prisma.product },
      { name: 'prices', model: prisma.price },
      { name: 'priceHistory', model: prisma.priceHistory },
      { name: 'suppliers', model: prisma.supplier },
      { name: 'uploads', model: prisma.upload }
    ];
    
    for (const table of tables) {
      const startCount = Date.now();
      const count = await table.model.count();
      const countTime = Date.now() - startCount;
      console.log(`   üìã ${table.name}: ${count.toLocaleString()} –∑–∞–ø–∏—Å–µ–π (${countTime}ms)`);
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    console.log('\\n3. üß™ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
    const startSimple = Date.now();
    const simpleProducts = await prisma.product.findMany({
      take: 10,
      select: {
        id: true,
        name: true
      }
    });
    const simpleTime = Date.now() - startSimple;
    console.log(`   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å (10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤): ${simpleTime}ms`);
    
    // –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–∞–∫ –≤ admin –ø–∞–Ω–µ–ª–∏)
    console.log('\\n4. üî¨ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å join–∞–º–∏)...');
    const startComplex = Date.now();
    const complexProducts = await prisma.product.findMany({
      take: 50,
      include: {
        prices: {
          take: 1,
          where: {
            validTo: null
          },
          include: {
            supplier: true
          }
        }
      }
    });
    const complexTime = Date.now() - startComplex;
    console.log(`   ‚è±Ô∏è –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å (50 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏): ${complexTime}ms`);
    
    // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)
    console.log('\\n5. ‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å)...');
    const startAll = Date.now();
    try {
      const allProducts = await prisma.product.findMany({
        select: {
          id: true,
          name: true,
          standardizedName: true,
          category: true
        }
      });
      const allTime = Date.now() - startAll;
      console.log(`   üìä –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã (${allProducts.length}): ${allTime}ms`);
      
      if (allTime > 5000) {
        console.log(`   ‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û! –ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª ${Math.round(allTime/1000)}s`);
      }
    } catch (error) {
      const failTime = Date.now() - startAll;
      console.log(`   ‚ùå –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è —á–µ—Ä–µ–∑ ${failTime}ms: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
    console.log('\\n6. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    try {
      const indexes = await prisma.$queryRaw`
        SELECT 
          schemaname,
          tablename,
          indexname,
          indexdef
        FROM pg_indexes 
        WHERE schemaname = 'public'
        AND tablename IN ('products', 'prices', 'priceHistory')
        ORDER BY tablename, indexname
      `;
      
      console.log('   üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã:');
      indexes.forEach(idx => {
        console.log(`   - ${idx.tablename}.${idx.indexname}`);
      });
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã: ${error.message}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\\n7. üêå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ limit
    const unlimitedQueries = [
      {
        name: 'products –±–µ–∑ limit',
        query: () => prisma.product.findMany({
          select: { id: true, name: true }
        })
      },
      {
        name: 'priceHistory –±–µ–∑ limit', 
        query: () => prisma.priceHistory.findMany({
          select: { id: true, price: true, createdAt: true },
          take: 100
        })
      }
    ];
    
    for (const test of unlimitedQueries) {
      const start = Date.now();
      try {
        const result = await test.query();
        const time = Date.now() - start;
        console.log(`   ${time > 1000 ? 'üêå' : '‚ö°'} ${test.name}: ${time}ms (${Array.isArray(result) ? result.length : 'N/A'} –∑–∞–ø–∏—Å–µ–π)`);
      } catch (error) {
        const time = Date.now() - start;
        console.log(`   ‚ùå ${test.name}: –ø—Ä–æ–≤–∞–ª —á–µ—Ä–µ–∑ ${time}ms`);
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
    
    const productCount = await prisma.product.count();
    if (productCount > 1000) {
      console.log('1. üìÑ –î–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø–æ 50-100 –∑–∞ —Ä–∞–∑)');
    }
    
    console.log('2. üîç –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π');
    console.log('3. üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lazy loading –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É');
    console.log('4. ‚ö° –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('5. üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å JOIN–∞–º–∏');
    
    // –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–∫—Å - —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    console.log('\\nüîß –ë–´–°–¢–†–û–ï –†–ï–®–ï–ù–ò–ï:');
    console.log('- –ò–∑–º–µ–Ω–∏—Ç—å admin –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π');
    console.log('- –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫');
    console.log('- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤');
    
    return {
      connectTime,
      productCount,
      performanceIssue: complexTime > 2000 || connectTime > 1000
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    return {
      error: error.message,
      performanceIssue: true
    };
  } finally {
    await prisma.$disconnect();
  }
}

diagnoseDatabasePerformance();
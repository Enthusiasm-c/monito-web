const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function testPriceHistoryFix() {
  try {
    console.log('üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò –ò–°–¢–û–†–ò–ò –¶–ï–ù');
    console.log('=' .repeat(70));
    
    // Test with a small Excel file to verify the fix
    const testFile = 'Widi Wiguna 03_07.xlsx';
    const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';
    const filePath = path.join(supplierFolderPath, testFile);
    
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFile}`);
      return;
    }
    
    const fileBuffer = fs.readFileSync(filePath);
    const fileSize = Math.round(fileBuffer.length / 1024);
    
    console.log(`üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSize}KB`);
    
    // Check current state of prices for Widi Wiguna products
    const widiSupplier = await prisma.supplier.findFirst({
      where: { name: 'Widi Wiguna' }
    });
    
    if (!widiSupplier) {
      console.log('‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ Widi Wiguna –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${widiSupplier.name} (${widiSupplier.id})`);
    
    // Get some test products before uploading
    const testProducts = await prisma.product.findMany({
      where: {
        prices: {
          some: {
            supplierId: widiSupplier.id
          }
        }
      },
      include: {
        prices: {
          where: {
            supplierId: widiSupplier.id,
            validTo: null
          }
        },
        priceHistory: {
          where: {
            supplierId: widiSupplier.id
          },
          orderBy: {
            createdAt: 'desc'
          }
        }
      },
      take: 3
    });
    
    console.log(`\\nüì¶ –°–û–°–¢–û–Ø–ù–ò–ï –î–û –ó–ê–ì–†–£–ó–ö–ò (3 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞):`);
    testProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name}:`);
      console.log(`   üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: ${product.prices.length}`);
      console.log(`   üìà –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${product.priceHistory.length}`);
      
      if (product.prices.length > 0) {
        product.prices.forEach((price, priceIndex) => {
          console.log(`      –¶–µ–Ω–∞ ${priceIndex + 1}: $${price.amount} ${price.unit}`);
        });
      }
    });
    
    // Upload the file using async-upload
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: testFile,
      contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });
    form.append('autoApprove', 'true');
    form.append('batchSize', '50');
    
    const startTime = Date.now();
    
    console.log('\\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ async-upload...');
    
    const uploadResponse = await fetch('http://localhost:3000/api/async-upload', {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
      timeout: 120000
    });
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${Math.round(processingTime/1000)}s`);
    console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
    
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorText}`);
      return;
    }
    
    const result = await uploadResponse.json();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
    console.log(`   üÜî Upload ID: ${result.uploadId}`);
    console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.status}`);
    console.log(`   üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${result.productsCreated || 0}`);
    
    // Wait a moment for processing to complete
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Check the same products after uploading
    const testProductsAfter = await prisma.product.findMany({
      where: {
        id: {
          in: testProducts.map(p => p.id)
        }
      },
      include: {
        prices: {
          where: {
            supplierId: widiSupplier.id,
            validTo: null
          }
        },
        priceHistory: {
          where: {
            supplierId: widiSupplier.id
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 5
        }
      }
    });
    
    console.log(`\\nüì¶ –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò (—Ç–µ –∂–µ 3 —Ç–æ–≤–∞—Ä–∞):`);
    testProductsAfter.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name}:`);
      console.log(`   üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: ${product.prices.length}`);
      console.log(`   üìà –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${product.priceHistory.length}`);
      
      if (product.prices.length > 0) {
        product.prices.forEach((price, priceIndex) => {
          console.log(`      –¶–µ–Ω–∞ ${priceIndex + 1}: $${price.amount} ${price.unit} (—Å–æ–∑–¥–∞–Ω–∞: ${price.createdAt.toLocaleString()})`);
        });
      }
      
      if (product.priceHistory.length > 0) {
        console.log(`   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏:`);
        product.priceHistory.slice(0, 3).forEach((history, histIndex) => {
          const changeInfo = history.changedFrom ? 
            ` (–±—ã–ª–æ $${history.changedFrom}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${history.changePercentage?.toFixed(1) || 'N/A'}%)` : 
            ' (–ø–µ—Ä–≤–∞—è —Ü–µ–Ω–∞)';
          console.log(`      ${histIndex + 1}. $${history.price} ${history.unit}${changeInfo}`);
          console.log(`         üìÖ ${history.createdAt.toLocaleString()} | –ü—Ä–∏—á–∏–Ω–∞: ${history.changeReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        });
      }
    });
    
    // Analyze the fix results
    console.log('\\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    
    let fixWorking = true;
    let multipleActivePrices = 0;
    let singleActivePrices = 0;
    let newHistoryEntries = 0;
    
    testProductsAfter.forEach((product) => {
      if (product.prices.length > 1) {
        multipleActivePrices++;
        fixWorking = false;
      } else if (product.prices.length === 1) {
        singleActivePrices++;
      }
      
      // Count new history entries (from today)
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const todayHistoryEntries = product.priceHistory.filter(h => h.createdAt >= today);
      newHistoryEntries += todayHistoryEntries.length;
    });
    
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–æ–π: ${singleActivePrices}`);
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${multipleActivePrices}`);
    console.log(`üìä –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–≥–æ–¥–Ω—è: ${newHistoryEntries}`);
    
    if (fixWorking) {
      console.log('\\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log('   ‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–Ω—É');
      console.log('   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –≤–µ–¥–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   ‚úÖ –õ–æ–≥–∏–∫–∞ "–æ–¥–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + –∏—Å—Ç–æ—Ä–∏—è" —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    } else {
      console.log('\\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
      console.log('   ‚ùå –ï—Å—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏');
      console.log('   ‚ùå –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    }
    
    // Check recent uploads
    const recentUploads = await prisma.upload.findMany({
      where: {
        supplierId: widiSupplier.id,
        createdAt: {
          gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
        }
      },
      include: {
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 3
    });
    
    console.log(`\\nüì§ –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò (24 —á–∞—Å–∞):`);
    recentUploads.forEach((upload, index) => {
      console.log(`${index + 1}. ${upload.originalName} - ${upload._count.prices} —Ü–µ–Ω`);
      console.log(`   üìÖ ${upload.createdAt.toLocaleString()} | –°—Ç–∞—Ç—É—Å: ${upload.status}`);
    });
    
    return {
      success: true,
      fixWorking,
      singleActivePrices,
      multipleActivePrices,
      newHistoryEntries,
      uploadId: result.uploadId,
      processingTime: processingTime
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return {
      success: false,
      error: error.message
    };
  } finally {
    await prisma.$disconnect();
  }
}

testPriceHistoryFix();
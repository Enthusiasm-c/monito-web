/**
 * –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—è—Ç–∏ –º–æ–¥–µ–ª–µ–π: GPT-4o, o3-mini, GPT-4.1-mini, GPT-4.1-nano
 */

const fs = require('fs');

const realProducts = JSON.parse(fs.readFileSync('test-real-products.json', 'utf8'));

const models = {
  'gpt-4o': { name: 'gpt-4o', inputCost: 0.0025, outputCost: 0.01 },
  'o3-mini': { name: 'o3-mini-2025-01-31', inputCost: 0.003, outputCost: 0.012 },
  'gpt-4.1-mini': { name: 'gpt-4.1-mini', inputCost: 0.0006, outputCost: 0.0024 },
  'gpt-4.1-nano': { name: 'gpt-4.1-nano', inputCost: 0.00015, outputCost: 0.0006 }
};

const systemPrompt = `You are "Monito-Normalizer" - normalize Indonesian food products to English with standard units and categories.

CRITICAL RULES:
- daun bawang ‚Üí Chives (NOT Green Onion)
- bawang merah ‚Üí Onion Red 
- bawang putih ‚Üí Garlic
- wortel ‚Üí Carrot
- kentang ‚Üí Potato
- ayam ‚Üí Chicken
- daging ‚Üí Beef
- ikan ‚Üí Fish
- udang ‚Üí Shrimp
- sawi ‚Üí Mustard Green
- kangkung ‚Üí Water Spinach
- bayam ‚Üí Spinach

Units: ikat‚Üíbunch, sisir‚Üíbunch, kg/g/l/ml/pcs remain same.
Categories: dairy, meat, seafood, vegetables, fruits, spices, grains, bakery, beverages, oils, sweeteners, condiments, disposables, other.

Return JSON with: originalName, standardizedName, originalUnit, quantity, standardizedUnit, category, confidence (0-100).`;

async function testAllModels() {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OPENAI_API_KEY not found');
  }

  const testProducts = realProducts.slice(0, 15).map(p => ({
    name: p.rawName,
    unit: p.originalUnit,
    price: p.price
  }));

  console.log('üß™ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô');
  console.log('=' .repeat(60));
  console.log(`üìä –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: ${testProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
  console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã: ${testProducts.slice(0, 3).map(p => p.name).join(', ')}...\n`);

  const results = {};

  for (const [key, model] of Object.entries(models)) {
    console.log(`ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${model.name}...`);
    const startTime = Date.now();

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: model.name,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: JSON.stringify(testProducts) }
          ],
          response_format: {
            type: "json_schema",
            json_schema: {
              name: "normalize_products",
              schema: {
                type: "object",
                properties: {
                  products: {
                    type: "array",
                    items: {
                      type: "object",
                      required: ["originalName", "standardizedName", "originalUnit", "quantity", "standardizedUnit", "category", "confidence"],
                      properties: {
                        originalName: { type: "string" },
                        standardizedName: { type: "string" },
                        originalUnit: { type: ["string", "null"] },
                        quantity: { type: ["number", "null"] },
                        standardizedUnit: { type: ["string", "null"] },
                        category: { type: "string" },
                        confidence: { type: "integer", minimum: 0, maximum: 100 }
                      }
                    }
                  }
                }
              }
            }
          },
          max_completion_tokens: 8192
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è ${model.name}: ${response.status} - ${errorText}`);
        
        results[key] = {
          model: model.name,
          success: false,
          error: `API Error: ${response.status} - ${errorText}`,
          processingTime: Date.now() - startTime
        };
        continue;
      }

      const result = await response.json();
      const endTime = Date.now();
      
      const content = result.choices?.[0]?.message?.content;
      const parsedResult = JSON.parse(content);
      const products = parsedResult.products || parsedResult;
      
      const inputTokens = result.usage?.prompt_tokens || 0;
      const outputTokens = result.usage?.completion_tokens || 0;
      const totalCost = (inputTokens / 1000) * model.inputCost + (outputTokens / 1000) * model.outputCost;
      
      const averageConfidence = products.reduce((sum, p) => sum + (p.confidence || 0), 0) / products.length;
      
      results[key] = {
        model: model.name,
        success: true,
        processingTime: endTime - startTime,
        inputTokens,
        outputTokens,
        totalTokens: inputTokens + outputTokens,
        totalCost,
        productsCount: products.length,
        averageConfidence: Math.round(averageConfidence),
        products: products.slice(0, 3) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      };
      
      console.log(`‚úÖ ${model.name}: ${endTime - startTime}ms, $${totalCost.toFixed(4)}, ${Math.round(averageConfidence)}% confidence`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ ${model.name}:`, error.message);
      results[key] = {
        model: model.name,
        success: false,
        error: error.message,
        processingTime: Date.now() - startTime
      };
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
  }

  return results;
}

function generateFullReport(results) {
  console.log('\n\nüìä –ü–û–õ–ù–´–ô –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
  console.log('=' .repeat(80));
  
  // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n');
  console.log('| –ú–æ–¥–µ–ª—å           | –í—Ä–µ–º—è(–º—Å) | –¢–æ–∫–µ–Ω—ã | –°—Ç–æ–∏–º–æ—Å—Ç—å | –ö–∞—á–µ—Å—Ç–≤–æ | –°—Ç–∞—Ç—É—Å |');
  console.log('|------------------|-----------|--------|-----------|----------|--------|');
  
  Object.entries(results).forEach(([key, result]) => {
    if (result.success) {
      const model = result.model.padEnd(16, ' ');
      const time = result.processingTime.toString().padEnd(9, ' ');
      const tokens = result.totalTokens.toString().padEnd(6, ' ');
      const cost = `$${result.totalCost.toFixed(4)}`.padEnd(9, ' ');
      const quality = `${result.averageConfidence}%`.padEnd(8, ' ');
      console.log(`| ${model} | ${time} | ${tokens} | ${cost} | ${quality} | ‚úÖ     |`);
    } else {
      const model = result.model.padEnd(16, ' ');
      console.log(`| ${model} | ERROR     | -      | -         | -        | ‚ùå     |`);
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const successfulResults = Object.values(results).filter(r => r.success);
  if (successfulResults.length >= 2) {
    console.log('\n\nüèÜ –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n');
    
    // –°–∫–æ—Ä–æ—Å—Ç—å
    const fastest = successfulResults.reduce((a, b) => 
      a.processingTime < b.processingTime ? a : b
    );
    console.log(`‚ö° –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: ${fastest.model} (${fastest.processingTime}ms)`);
    
    // –°—Ç–æ–∏–º–æ—Å—Ç—å
    const cheapest = successfulResults.reduce((a, b) => 
      a.totalCost < b.totalCost ? a : b
    );
    console.log(`üí∞ –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è: ${cheapest.model} ($${cheapest.totalCost.toFixed(4)})`);
    
    // –ö–∞—á–µ—Å—Ç–≤–æ
    const bestQuality = successfulResults.reduce((a, b) => 
      a.averageConfidence > b.averageConfidence ? a : b
    );
    console.log(`üéØ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${bestQuality.model} (${bestQuality.averageConfidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`);
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ/—Ü–µ–Ω–∞)
    const efficiency = successfulResults.map(r => ({
      ...r,
      efficiency: r.averageConfidence / (r.totalCost * 1000)
    }));
    const mostEfficient = efficiency.reduce((a, b) => 
      a.efficiency > b.efficiency ? a : b
    );
    console.log(`üìä –õ—É—á—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${mostEfficient.model} (${mostEfficient.efficiency.toFixed(0)} –∫–∞—á–µ—Å—Ç–≤–æ/$)`);
    
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    console.log('\nüìã –ü–û–î–†–û–ë–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:\n');
    
    successfulResults.forEach(result => {
      const productsCount = 15; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
      console.log(`ü§ñ ${result.model}:`);
      console.log(`   ‚è±Ô∏è  –°–∫–æ—Ä–æ—Å—Ç—å: ${result.processingTime}ms (${(result.processingTime / productsCount).toFixed(0)}ms/–ø—Ä–æ–¥—É–∫—Ç)`);
      console.log(`   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${result.totalCost.toFixed(4)} ($${(result.totalCost / productsCount).toFixed(5)}/–ø—Ä–æ–¥—É–∫—Ç)`);
      console.log(`   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: ${result.averageConfidence}%`);
      console.log(`   üìä –¢–æ–∫–µ–Ω—ã: ${result.totalTokens} (${result.inputTokens} + ${result.outputTokens})`);
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π
      if (result !== fastest) {
        const speedDiff = (result.processingTime / fastest.processingTime).toFixed(1);
        console.log(`   üìà –°–∫–æ—Ä–æ—Å—Ç—å vs ${fastest.model}: –≤ ${speedDiff}x —Ä–∞–∑ –º–µ–¥–ª–µ–Ω–Ω–µ–µ`);
      }
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π
      if (result !== cheapest) {
        const costDiff = (result.totalCost / cheapest.totalCost).toFixed(1);
        console.log(`   üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å vs ${cheapest.model}: –≤ ${costDiff}x —Ä–∞–∑ –¥–æ—Ä–æ–∂–µ`);
      }
      
      console.log('');
    });
    
    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    console.log('üìä –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
    console.log(`   üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${fastest.model}`);
    console.log(`   üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cheapest.model}`);
    console.log(`   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${bestQuality.model}`);
    console.log(`   ‚öñÔ∏è  –õ—É—á—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${mostEfficient.model}`);
    
    console.log('\nüí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (cheapest.model.includes('4.1-nano')) {
      console.log('   üèÜ GPT-4.1-nano - –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–µ—à–µ–≤–æ –∏ –±—ã—Å—Ç—Ä–æ)');
    }
    if (bestQuality.model.includes('o3-mini')) {
      console.log('   üéØ o3-mini - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
    }
    if (fastest.model.includes('4.1')) {
      console.log('   ‚ö° GPT-4.1 —Å–µ—Ä–∏—è - –æ—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏');
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reportFile = `full-model-comparison-${timestamp}.json`;
  fs.writeFileSync(reportFile, JSON.stringify({
    timestamp: new Date().toISOString(),
    testSize: testProducts.length,
    results
  }, null, 2));
  
  console.log(`\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${reportFile}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  try {
    const results = await testAllModels();
    generateFullReport(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY');
  process.exit(1);
}

main();
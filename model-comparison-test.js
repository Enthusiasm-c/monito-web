/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è GPT-4o –∏ o3-mini –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const realProducts = JSON.parse(fs.readFileSync('test-real-products.json', 'utf8'));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
const models = {
  'gpt-4o': {
    name: 'gpt-4o',
    endpoint: 'https://api.openai.com/v1/chat/completions',
    inputCostPer1K: 0.0025,
    outputCostPer1K: 0.01
  },
  'o3-mini': {
    name: 'o3-mini-2025-01-31', 
    endpoint: 'https://api.openai.com/v1/chat/completions',
    inputCostPer1K: 0.003,
    outputCostPer1K: 0.012
  }
};

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
const systemPrompt = `You are "Monito-Normalizer"

You receive a JSON array of raw product rows extracted from Indonesian price lists, invoices, catalogues, etc.  
Your task is to return a new JSON array with every row normalised, so that all names are in clean English and all units follow a single canonical list.

NORMALISATION RULES:
A. **Name Translation Rules**  
   ‚Ä¢ Translate Indonesian ‚Üí English using EXACT terms that exist in grocery databases.
   ‚Ä¢ Fix spelling / duplicated spaces.  
   ‚Ä¢ Format: "<Main noun> <Descriptor>", e.g. "Cheese Mozzarella", "Chicken Fillet Fresh". Remove brand names & packaging words.  
   ‚Ä¢ USE STANDARD GROCERY TERMS - avoid unusual combinations.

CRITICAL INDONESIAN ‚Üí ENGLISH MAPPINGS:
‚Ä¢ "daun bawang" ‚Üí "Chives" (NOT "Onion Green")
‚Ä¢ "bawang merah" ‚Üí "Onion Red" 
‚Ä¢ "bawang putih" ‚Üí "Garlic"
‚Ä¢ "wortel" ‚Üí "Carrot"
‚Ä¢ "kentang" ‚Üí "Potato" 
‚Ä¢ "tomat" ‚Üí "Tomato"
‚Ä¢ "selada" ‚Üí "Lettuce"
‚Ä¢ "kriting/keriting" ‚Üí "Curly"
‚Ä¢ "harum" ‚Üí "Sweet" (for fruits, NOT "Fragrant")
‚Ä¢ "mangga" ‚Üí "Mango"
‚Ä¢ "pisang" ‚Üí "Banana"
‚Ä¢ "apel" ‚Üí "Apple"
‚Ä¢ "jeruk" ‚Üí "Orange"
‚Ä¢ "ayam" ‚Üí "Chicken"
‚Ä¢ "daging" ‚Üí "Beef"
‚Ä¢ "ikan" ‚Üí "Fish"
‚Ä¢ "udang" ‚Üí "Shrimp"
‚Ä¢ "sawi" ‚Üí "Mustard Green"
‚Ä¢ "kangkung" ‚Üí "Water Spinach"
‚Ä¢ "bayam" ‚Üí "Spinach"

B. **Units**  
   ‚Ä¢ Canonical list (lower-case): kg, g, l, ml, pcs, pack, box, bottle, can, bunch, sheet, sack.  
   ‚Ä¢ Indonesian ‚áí English mapping: sisir ‚Üí bunch ¬∑ butir ‚Üí pcs ¬∑ lembar ‚Üí sheet ¬∑ karung ‚Üí sack.  

C. **Category list**  
   dairy, meat, seafood, vegetables, fruits, spices, grains, bakery, beverages, oils, sweeteners, condiments, disposables, other.

D. **Confidence**  
   100 perfect ‚Üí spelling obvious & unit clear;  
   80‚Äì99 high ‚Üí minor guess (translation, plural/singular);  
   60‚Äì79 medium ‚Üí unit guessed or ambiguous name;  
   <60 low ‚Üí unsure (return anyway).

Return JSON array with: originalName, standardizedName, originalUnit, quantity, standardizedUnit, category, confidence.`;

class ModelTester {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY;
    if (!this.apiKey) {
      throw new Error('OPENAI_API_KEY not found in environment variables');
    }
    this.results = {};
  }

  async testModel(modelConfig, testProducts) {
    console.log(`üß™ Testing ${modelConfig.name}...`);
    
    const startTime = Date.now();
    let inputTokens = 0;
    let outputTokens = 0;
    
    try {
      // –û—Ü–µ–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
      const inputText = systemPrompt + JSON.stringify(testProducts);
      inputTokens = Math.ceil(inputText.length / 4); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
      
      const response = await fetch(modelConfig.endpoint, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: modelConfig.name,
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user', 
              content: JSON.stringify(testProducts)
            }
          ],
          response_format: {
            type: "json_schema",
            json_schema: {
              name: "normalize_products",
              schema: {
                type: "object",
                properties: {
                  products: {
                    type: "array",
                    items: {
                      type: "object",
                      required: [
                        "originalName", "standardizedName",
                        "originalUnit", "quantity",
                        "standardizedUnit", "category", "confidence"
                      ],
                      properties: {
                        originalName: { type: "string" },
                        standardizedName: { type: "string" },
                        originalUnit: { type: ["string", "null"] },
                        quantity: { type: ["number", "null"] },
                        standardizedUnit: { type: ["string", "null"] },
                        category: { type: "string" },
                        confidence: { type: "integer", minimum: 0, maximum: 100 }
                      },
                      additionalProperties: false
                    }
                  }
                },
                required: ["products"],
                additionalProperties: false
              },
              strict: true
            }
          },
          stream: false,
          max_completion_tokens: 16384
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API error: ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const endTime = Date.now();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (result.usage) {
        inputTokens = result.usage.prompt_tokens;
        outputTokens = result.usage.completion_tokens;
      } else {
        // –û—Ü–µ–Ω–∏–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        const outputText = result.choices?.[0]?.message?.content || '';
        outputTokens = Math.ceil(outputText.length / 4);
      }
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const content = result.choices?.[0]?.message?.content;
      let standardizedProducts = [];
      
      if (content) {
        try {
          const parsedResponse = JSON.parse(content);
          standardizedProducts = parsedResponse.products || parsedResponse;
        } catch (parseError) {
          console.error(`‚ùå Failed to parse response from ${modelConfig.name}`);
          throw parseError;
        }
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const inputCost = (inputTokens / 1000) * modelConfig.inputCostPer1K;
      const outputCost = (outputTokens / 1000) * modelConfig.outputCostPer1K;
      const totalCost = inputCost + outputCost;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const qualityMetrics = this.analyzeQuality(testProducts, standardizedProducts);
      
      return {
        model: modelConfig.name,
        success: true,
        processingTime: endTime - startTime,
        inputTokens,
        outputTokens,
        totalTokens: inputTokens + outputTokens,
        inputCost,
        outputCost,
        totalCost,
        productsProcessed: standardizedProducts.length,
        qualityMetrics,
        results: standardizedProducts
      };
      
    } catch (error) {
      console.error(`‚ùå Error testing ${modelConfig.name}:`, error.message);
      return {
        model: modelConfig.name,
        success: false,
        error: error.message,
        processingTime: Date.now() - startTime,
        inputTokens: 0,
        outputTokens: 0,
        totalCost: 0
      };
    }
  }

  analyzeQuality(original, standardized) {
    if (!standardized || standardized.length !== original.length) {
      return {
        completionRate: standardized ? (standardized.length / original.length) * 100 : 0,
        averageConfidence: 0,
        categoryAccuracy: 0,
        unitStandardization: 0
      };
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const confidenceScores = standardized.map(p => p.confidence || 0);
    const averageConfidence = confidenceScores.reduce((a, b) => a + b, 0) / confidenceScores.length;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞)
    const validCategories = ['dairy', 'meat', 'seafood', 'vegetables', 'fruits', 'spices', 'grains', 'bakery', 'beverages', 'oils', 'sweeteners', 'condiments', 'disposables', 'other'];
    const validCategoryCount = standardized.filter(p => validCategories.includes(p.category)).length;
    const categoryAccuracy = (validCategoryCount / standardized.length) * 100;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –µ–¥–∏–Ω–∏—Ü
    const validUnits = ['kg', 'g', 'l', 'ml', 'pcs', 'pack', 'box', 'bottle', 'can', 'bunch', 'sheet', 'sack'];
    const standardizedUnitsCount = standardized.filter(p => 
      !p.standardizedUnit || validUnits.includes(p.standardizedUnit.toLowerCase())
    ).length;
    const unitStandardization = (standardizedUnitsCount / standardized.length) * 100;
    
    return {
      completionRate: 100,
      averageConfidence: Math.round(averageConfidence),
      categoryAccuracy: Math.round(categoryAccuracy),
      unitStandardization: Math.round(unitStandardization)
    };
  }

  async runComparison(testSize = 25) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${testSize} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)\\n`);
    
    // –ë–µ—Ä–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testProducts = realProducts.slice(0, testSize).map(p => ({
      name: p.rawName,
      unit: p.originalUnit,
      price: p.price
    }));
    
    console.log(`üìä –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: ${testProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    console.log(`üìù –ü—Ä–∏–º–µ—Ä—ã: ${testProducts.slice(0, 3).map(p => p.name).join(', ')}...\\n`);
    
    const results = {};
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    for (const [modelKey, modelConfig] of Object.entries(models)) {
      console.log(`‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${modelConfig.name}...`);
      results[modelKey] = await this.testModel(modelConfig, testProducts);
      console.log(`‚úÖ ${modelConfig.name} –∑–∞–≤–µ—Ä—à–µ–Ω\\n`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    return results;
  }

  generateReport(results) {
    console.log('üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ú–û–î–ï–õ–Ø–ú\\n');
    console.log('='.repeat(80));
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    console.log('| –ú–æ–¥–µ–ª—å           | –í—Ä–µ–º—è(–º—Å) | –¢–æ–∫–µ–Ω—ã | –°—Ç–æ–∏–º–æ—Å—Ç—å | –ö–∞—á–µ—Å—Ç–≤–æ | –£—Å–ø–µ—Ö |');
    console.log('|------------------|-----------|---------|-----------|----------|-------|');
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    Object.entries(results).forEach(([key, result]) => {
      if (result.success) {
        const model = result.model.padEnd(16, ' ');
        const time = result.processingTime.toString().padEnd(9, ' ');
        const tokens = `${result.totalTokens}`.padEnd(7, ' ');
        const cost = `$${result.totalCost.toFixed(4)}`.padEnd(9, ' ');
        const quality = `${result.qualityMetrics.averageConfidence}%`.padEnd(8, ' ');
        const success = '‚úÖ';
        
        console.log(`| ${model} | ${time} | ${tokens} | ${cost} | ${quality} | ${success} |`);
      } else {
        const model = result.model.padEnd(16, ' ');
        console.log(`| ${model} | ERROR     | -       | -         | -        | ‚ùå    |`);
      }
    });
    
    console.log('='.repeat(80));
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    console.log('\\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:\\n');
    
    Object.entries(results).forEach(([key, result]) => {
      if (result.success) {
        console.log(`ü§ñ ${result.model}:`);
        console.log(`   ‚è±Ô∏è  –°–∫–æ—Ä–æ—Å—Ç—å: ${result.processingTime}ms`);
        console.log(`   üéØ –¢–æ–∫–µ–Ω—ã: ${result.inputTokens} –≤—Ö–æ–¥ + ${result.outputTokens} –≤—ã—Ö–æ–¥ = ${result.totalTokens}`);
        console.log(`   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${result.totalCost.toFixed(4)} ($${result.inputCost.toFixed(4)} + $${result.outputCost.toFixed(4)})`);
        console.log(`   üìä –ö–∞—á–µ—Å—Ç–≤–æ:`);
        console.log(`      - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: ${result.qualityMetrics.completionRate}%`);
        console.log(`      - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.qualityMetrics.averageConfidence}%`);
        console.log(`      - –¢–æ—á–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.qualityMetrics.categoryAccuracy}%`);
        console.log(`      - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü: ${result.qualityMetrics.unitStandardization}%`);
        console.log('');
      } else {
        console.log(`‚ùå ${result.model}: ${result.error}\\n`);
      }
    });
    
    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    const successfulResults = Object.values(results).filter(r => r.success);
    if (successfulResults.length >= 2) {
      console.log('üèÜ –í–´–í–û–î–´:\\n');
      
      // –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
      const fastest = successfulResults.reduce((a, b) => 
        a.processingTime < b.processingTime ? a : b
      );
      console.log(`‚ö° –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: ${fastest.model} (${fastest.processingTime}ms)`);
      
      // –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è
      const cheapest = successfulResults.reduce((a, b) => 
        a.totalCost < b.totalCost ? a : b
      );
      console.log(`üí∞ –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è: ${cheapest.model} ($${cheapest.totalCost.toFixed(4)})`);
      
      // –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      const bestQuality = successfulResults.reduce((a, b) => 
        a.qualityMetrics.averageConfidence > b.qualityMetrics.averageConfidence ? a : b
      );
      console.log(`üéØ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${bestQuality.model} (${bestQuality.qualityMetrics.averageConfidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`);
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
      console.log('\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
      if (cheapest.model === fastest.model && cheapest.model === bestQuality.model) {
        console.log(`   ${cheapest.model} - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º`);
      } else {
        console.log(`   –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏: ${fastest.model}`);
        console.log(`   –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏: ${cheapest.model}`);
        console.log(`   –î–ª—è –∫–∞—á–µ—Å—Ç–≤–∞: ${bestQuality.model}`);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportFile = `model-comparison-${timestamp}.json`;
    fs.writeFileSync(reportFile, JSON.stringify({
      timestamp: new Date().toISOString(),
      testSize: Object.values(results)[0]?.productsProcessed || 0,
      results
    }, null, 2));
    
    console.log(`\\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${reportFile}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  try {
    const tester = new ModelTester();
    const results = await tester.runComparison(25); // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 25 –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    tester.generateReport(results);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

main();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function checkPriceUpdates() {
  try {
    console.log('üí∞ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –¶–ï–ù –£ –ü–û–°–¢–ê–í–©–ò–ö–û–í');
    console.log('=' .repeat(70));
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    console.log(`üìÖ –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω —Å ${today.toLocaleDateString()}`);
    
    // –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è
    const suppliersWithPriceUpdates = await prisma.supplier.findMany({
      where: {
        prices: {
          some: {
            createdAt: {
              gte: today
            }
          }
        }
      },
      include: {
        _count: {
          select: {
            prices: true,
            priceHistory: true
          }
        },
        prices: {
          where: {
            createdAt: {
              gte: today
            }
          },
          include: {
            product: true
          },
          orderBy: {
            createdAt: 'desc'
          }
        },
        priceHistory: {
          where: {
            createdAt: {
              gte: today
            }
          },
          include: {
            product: true
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 10
        }
      },
      orderBy: {
        name: 'asc'
      }
    });
    
    console.log(`\nüìä –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ü–µ–Ω —Å–µ–≥–æ–¥–Ω—è: ${suppliersWithPriceUpdates.length}`);
    
    if (suppliersWithPriceUpdates.length === 0) {
      console.log('‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω');
      return;
    }
    
    let totalNewPrices = 0;
    let totalPriceHistory = 0;
    
    console.log('\nüè¢ –î–ï–¢–ê–õ–ò –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:');
    
    suppliersWithPriceUpdates.forEach((supplier, index) => {
      const newPricesToday = supplier.prices.length;
      const historyToday = supplier.priceHistory.length;
      
      totalNewPrices += newPricesToday;
      totalPriceHistory += historyToday;
      
      console.log(`\n${index + 1}. üè¢ ${supplier.name}`);
      console.log(`   üìä –í—Å–µ–≥–æ —Ü–µ–Ω: ${supplier._count.prices}`);
      console.log(`   üìà –í—Å–µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏: ${supplier._count.priceHistory}`);
      console.log(`   üÜï –ù–æ–≤—ã—Ö —Ü–µ–Ω —Å–µ–≥–æ–¥–Ω—è: ${newPricesToday}`);
      console.log(`   üìã –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–≥–æ–¥–Ω—è: ${historyToday}`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Ü–µ–Ω
      if (newPricesToday > 0) {
        console.log(`   üí∞ –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö —Ü–µ–Ω:`);
        supplier.prices.slice(0, 5).forEach((price, priceIndex) => {
          console.log(`      ${priceIndex + 1}. ${price.product.name}: $${price.amount} ${price.unit}`);
        });
        if (newPricesToday > 5) {
          console.log(`      ... –∏ –µ—â–µ ${newPricesToday - 5} —Ç–æ–≤–∞—Ä–æ–≤`);
        }
      }
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      if (historyToday > 0) {
        console.log(`   üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:`);
        supplier.priceHistory.slice(0, 3).forEach((record, histIndex) => {
          const changeInfo = record.changedFrom ? 
            ` (–±—ã–ª–æ $${record.changedFrom}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${record.changePercentage?.toFixed(1) || 'N/A'}%)` : 
            ' (–ø–µ—Ä–≤–∞—è —Ü–µ–Ω–∞)';
          console.log(`      ${histIndex + 1}. ${record.product.name}: $${record.price}${changeInfo}`);
        });
        if (historyToday > 3) {
          console.log(`      ... –∏ –µ—â–µ ${historyToday - 3} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
        }
      }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –¶–ï–ù:');
    
    const priceChanges = await prisma.priceHistory.findMany({
      where: {
        createdAt: {
          gte: today
        },
        changedFrom: {
          not: null
        }
      },
      include: {
        supplier: true,
        product: true
      }
    });
    
    if (priceChanges.length > 0) {
      const increases = priceChanges.filter(p => p.changePercentage && p.changePercentage > 0);
      const decreases = priceChanges.filter(p => p.changePercentage && p.changePercentage < 0);
      const noChange = priceChanges.filter(p => p.changePercentage === 0);
      
      console.log(`üìä –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: ${priceChanges.length}`);
      console.log(`üìà –ü–æ–¥–æ—Ä–æ–∂–∞–ª–æ: ${increases.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`üìâ –ü–æ–¥–µ—à–µ–≤–µ–ª–æ: ${decreases.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${noChange.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      if (increases.length > 0) {
        const avgIncrease = increases.reduce((sum, p) => sum + (p.changePercentage || 0), 0) / increases.length;
        console.log(`üìà –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω: ${avgIncrease.toFixed(1)}%`);
      }
      
      if (decreases.length > 0) {
        const avgDecrease = decreases.reduce((sum, p) => sum + (p.changePercentage || 0), 0) / decreases.length;
        console.log(`üìâ –°—Ä–µ–¥–Ω–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω: ${Math.abs(avgDecrease).toFixed(1)}%`);
      }
      
      // –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const biggestChanges = priceChanges
        .filter(p => p.changePercentage !== null)
        .sort((a, b) => Math.abs(b.changePercentage || 0) - Math.abs(a.changePercentage || 0))
        .slice(0, 5);
      
      if (biggestChanges.length > 0) {
        console.log('\nüî• –¢–û–ü-5 –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô:');
        biggestChanges.forEach((change, index) => {
          const direction = (change.changePercentage || 0) > 0 ? 'üìà' : 'üìâ';
          console.log(`${index + 1}. ${direction} ${change.product.name} (${change.supplier.name})`);
          console.log(`   –ë—ã–ª–æ: $${change.changedFrom} ‚Üí –°—Ç–∞–ª–æ: $${change.price}`);
          console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${change.changePercentage?.toFixed(1) || 'N/A'}%`);
        });
      }
    } else {
      console.log('üìä –í—Å–µ —Ü–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è - –Ω–æ–≤—ã–µ (–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–∏ —Ü–µ–Ω—ã
    console.log('\nüì§ –ò–°–¢–û–ß–ù–ò–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô –¶–ï–ù:');
    
    const todayUploads = await prisma.upload.findMany({
      where: {
        createdAt: {
          gte: today
        }
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    if (todayUploads.length > 0) {
      console.log(`üìã –ó–∞–≥—Ä—É–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${todayUploads.length}`);
      
      todayUploads.forEach((upload, index) => {
        console.log(`${index + 1}. ${upload.originalName || upload.fileName} (${upload.supplier.name})`);
        console.log(`   üì¶ –°–æ–∑–¥–∞–Ω–æ —Ü–µ–Ω: ${upload._count.prices}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
        console.log(`   üìÖ –í—Ä–µ–º—è: ${upload.createdAt.toLocaleString()}`);
      });
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${suppliersWithPriceUpdates.length}`);
    console.log(`üí∞ –ù–æ–≤—ã—Ö —Ü–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalNewPrices}`);
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–æ: ${totalPriceHistory}`);
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${todayUploads.length}`);
    console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–Ω: ${priceChanges.length}`);
    
    return {
      suppliersUpdated: suppliersWithPriceUpdates.length,
      newPrices: totalNewPrices,
      priceHistoryRecords: totalPriceHistory,
      uploads: todayUploads.length,
      priceChanges: priceChanges.length,
      suppliers: suppliersWithPriceUpdates.map(s => ({
        name: s.name,
        newPrices: s.prices.length,
        historyRecords: s.priceHistory.length
      }))
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkPriceUpdates();
const fs = require('fs');
const path = require('path');

async function testAsyncUpload() {
  try {
    console.log('üß™ –¢–ï–°–¢ ASYNC-UPLOAD –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î');
    console.log('=' .repeat(60));
    
    // –í—ã–±—Ä–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π PDF —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    const testFile = 'Cheese work  04_07.pdf';
    const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';
    const filePath = path.join(supplierFolderPath, testFile);
    
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFile}`);
      return;
    }
    
    const fileBuffer = fs.readFileSync(filePath);
    const fileSize = Math.round(fileBuffer.length / 1024);
    
    console.log(`üìÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: ${testFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSize}KB`);
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: Cheese Work`);
    
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ async-upload
    console.log('\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ async-upload...');
    
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: testFile,
      contentType: 'application/pdf'
    });
    form.append('autoApprove', 'true');
    form.append('batchSize', '50');
    
    const startTime = Date.now();
    
    try {
      const uploadResponse = await fetch('http://localhost:3000/api/async-upload', {
        method: 'POST',
        body: form,
        headers: form.getHeaders(),
        timeout: 180000 // 3 –º–∏–Ω—É—Ç—ã
      });
      
      const endTime = Date.now();
      const processingTime = endTime - startTime;
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${Math.round(processingTime/1000)}s`);
      console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
      
      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorText}`);
        return;
      }
      
      const result = await uploadResponse.json();
      console.log('‚úÖ Async –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üÜî Upload ID: ${result.uploadId || 'N/A'}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.status || 'N/A'}`);
      console.log(`   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message || 'N/A'}`);
      
      // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (30 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 30000));
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');
      
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient({
        datasources: {
          db: {
            url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
          }
        }
      });
      
      // –ù–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ ID
      if (result.uploadId) {
        const upload = await prisma.upload.findUnique({
          where: { id: result.uploadId },
          include: {
            supplier: true,
            _count: {
              select: {
                prices: true
              }
            }
          }
        });
        
        if (upload) {
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î:`);
          console.log(`   üìÅ –§–∞–π–ª: ${upload.originalName || upload.fileName}`);
          console.log(`   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${upload.supplier.name}`);
          console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
          console.log(`   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${upload._count.prices}`);
          console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–æ: ${upload.createdAt.toLocaleString()}`);
          console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${upload.processingTimeMs}ms`);
          
          if (upload.errorMessage) {
            console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${upload.errorMessage.substring(0, 200)}...`);
          }
        } else {
          console.log(`‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Å ID ${result.uploadId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î`);
        }
      }
      
      // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const recentUploads = await prisma.upload.findMany({
        where: {
          createdAt: {
            gte: new Date(startTime)
          }
        },
        include: {
          supplier: true,
          _count: {
            select: {
              prices: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });
      
      console.log(`\nüìä –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —Å ${new Date(startTime).toLocaleTimeString()}: ${recentUploads.length}`);
      
      recentUploads.forEach((upload, index) => {
        console.log(`${index + 1}. ${upload.originalName || upload.fileName} (${upload.supplier.name})`);
        console.log(`   üì¶ ${upload._count.prices} —Ç–æ–≤–∞—Ä–æ–≤ | üìä ${upload.status}`);
      });
      
      await prisma.$disconnect();
      
      return {
        success: true,
        uploadId: result.uploadId,
        processingTime,
        savedToDatabase: recentUploads.length > 0
      };
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testAsyncUpload();
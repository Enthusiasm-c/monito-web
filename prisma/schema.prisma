generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  contactInfo String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prices      Price[]
  uploads     Upload[]

  @@map("suppliers")
}

model Product {
  id               String   @id @default(cuid())
  rawName          String
  name             String
  standardizedName String
  category         String?
  unit             String
  standardizedUnit String
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  prices           Price[]

  @@unique([standardizedName, standardizedUnit])
  @@map("products")
}

model Price {
  id         String    @id @default(cuid())
  amount     Decimal
  unit       String
  supplierId String
  productId  String
  uploadId   String?
  validFrom  DateTime  @default(now())
  validTo    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier   Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  upload     Upload?   @relation(fields: [uploadId], references: [id])

  @@unique([supplierId, productId, validFrom])
  @@map("prices")
}

model Upload {
  id                 String   @id @default(cuid())
  originalName       String?
  fileSize           Int?
  mimeType           String?
  status             String   @default("pending")
  supplierId         String
  extractedData      Json?
  errorMessage       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  fileName           String?
  processingDetails  String?
  url                String?
  completenessRatio  Float?
  processingCostUsd  Float?
  processingTimeMs   Int?
  sheetsProcessed    Json?
  tokensUsed         Int?
  totalRowsDetected  Int?
  totalRowsProcessed Int?
  
  // Approval workflow fields
  approvalStatus     String?  @default("pending_review") // pending_review, approved, rejected
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  reviewNotes        String?
  autoApproved       Boolean  @default(false)
  
  prices             Price[]
  supplier           Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("uploads")
}

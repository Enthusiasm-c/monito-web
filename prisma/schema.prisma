generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  contactInfo String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prices      Price[]
  uploads     Upload[]
  unmatchedQueue UnmatchedQueue[]
  priceHistory   PriceHistory[]

  @@map("suppliers")
}

model Product {
  id               String   @id @default(cuid())
  rawName          String
  name             String
  standardizedName String
  category         String?
  unit             String
  standardizedUnit String?
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  prices           Price[]
  aliases          ProductAlias[]
  assignedFromQueue UnmatchedQueue[]
  priceHistory     PriceHistory[]

  @@unique([standardizedName, standardizedUnit])
  @@map("products")
}

model ProductAlias {
  id        String   @id @default(cuid())
  productId String
  alias     String   @unique
  language  String?  @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([alias])
  @@map("product_alias")
}

model Price {
  id         String    @id @default(cuid())
  amount     Decimal
  unit       String
  unitPrice  Decimal?  @map("unit_price") // Price per canonical unit (e.g., per kg, per liter)
  supplierId String
  productId  String
  uploadId   String?
  validFrom  DateTime  @default(now())
  validTo    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier   Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  upload     Upload?   @relation(fields: [uploadId], references: [id])

  @@unique([supplierId, productId, validFrom])
  @@index([unitPrice]) // Index for fast price comparison queries
  @@map("prices")
}

model Upload {
  id                 String   @id @default(cuid())
  originalName       String?
  fileSize           Int?
  mimeType           String?
  status             String   @default("pending")
  supplierId         String
  extractedData      Json?
  errorMessage       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  fileName           String?
  processingDetails  Json?
  url                String?
  completenessRatio  Float?
  processingCostUsd  Float?
  processingTimeMs   Int?
  sheetsProcessed    Json?
  tokensUsed         Int?
  totalRowsDetected  Int?
  totalRowsProcessed Int?
  
  // Approval workflow fields
  approvalStatus     String?  @default("pending_review") // pending_review, processing, approved, rejected
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  reviewNotes        String?
  autoApproved       Boolean  @default(false)
  
  prices             Price[]
  supplier           Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  unmatchedQueue     UnmatchedQueue[]
  priceHistory       PriceHistory[]

  @@map("uploads")
}

model LanguageDictionary {
  id          String   @id @default(cuid())
  sourceWord  String   @unique // wortel, ayam, zanahoria
  targetWord  String   // carrot, chicken, carrot
  language    String   // id, es, en
  category    String?  // vegetables, meat, etc
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // admin user who added this

  @@index([sourceWord])
  @@index([language])
  @@map("language_dictionary")
}

model UnitDictionary {
  id           String   @id @default(cuid())
  sourceUnit   String   @unique // g, kg, liter, pcs, buah
  targetUnit   String   // g, kg, L, pcs, pcs
  conversionFactor Float @default(1.0) // 1000 for g->kg
  category     String?  // weight, volume, count
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?

  @@index([sourceUnit])
  @@index([category])
  @@map("unit_dictionary")
}

model UnmatchedQueue {
  id             String   @id @default(cuid())
  rawName        String   // Original product name that couldn't be matched
  normalizedName String?  // Cleaned/normalized version
  context        Json?    // Additional context (supplier, price, unit, etc.)
  uploadId       String?  // Which upload this came from
  supplierId     String?  // Supplier context
  frequency      Int      @default(1) // How many times this appeared
  status         String   @default("pending") // pending, assigned, ignored
  assignedProductId String? // If manually assigned to existing product
  assignedBy     String?  // Admin who assigned this
  assignedAt     DateTime?
  notes          String?  // Admin notes
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  supplier       Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  upload         Upload?   @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  assignedProduct Product? @relation(fields: [assignedProductId], references: [id], onDelete: SetNull)

  @@index([rawName])
  @@index([status])
  @@index([supplierId])
  @@map("unmatched_queue")
}

model PriceHistory {
  id               String   @id @default(cuid())
  productId        String
  supplierId       String
  price            Decimal
  unit             String
  unitPrice        Decimal?
  quantity         Decimal? // Quantity for this price (e.g., 1 kg, 500 g)
  changedFrom      Decimal? // Previous price
  changePercentage Float?   // Percentage change from previous price
  changeReason     String?  // 'upload', 'manual', 'api', 'initial'
  changedBy        String?  // User ID who made the change
  uploadId         String?  // Related upload if price came from file
  notes            String?  // Optional notes about the change
  createdAt        DateTime @default(now())
  
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  upload   Upload?  @relation(fields: [uploadId], references: [id], onDelete: SetNull)
  
  @@index([productId, supplierId, createdAt(sort: Desc)])
  @@index([supplierId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("price_history")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Hashed password
  role      String   @default("viewer") // admin, manager, viewer
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

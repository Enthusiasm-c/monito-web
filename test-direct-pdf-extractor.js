#!/usr/bin/env node

/**
 * –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ enhancedPdfExtractor –±–µ–∑ JobQueue
 * –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π background processor
 */

const fs = require('fs');
const path = require('path');

async function testDirectPdfExtractor() {
  console.log('üß™ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PDF‚ÜíImages‚ÜíGemini Flash 2.0');
  console.log('================================================');
  console.log('');

  try {
    // –ó–∞–≥—Ä—É–∑–∏–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ async-upload
    const fileUrl = 'https://cdc1w79ssc4kg6xh.public.blob.vercel-storage.com/Island%20Organics%20Bali-wfQOZrvhymEkhEcTw2UjMLYurMsyUC.pdf';
    const fileName = 'Island Organics Bali.pdf';

    console.log(`üìÅ –§–∞–π–ª: ${fileName}`);
    console.log(`üîó URL: ${fileUrl}`);
    console.log('');

    // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ enhancedPdfExtractor —á–µ—Ä–µ–∑ API
    const startTime = Date.now();
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ enhancedPdfExtractor...');
    
    const testScript = `
const { enhancedPdfExtractor } = require('./app/services/enhancedPdfExtractor');

async function testExtraction() {
  console.log('üîç PDF extraction starting: ${fileName}');
  
  const result = await enhancedPdfExtractor.extractFromPdf('${fileUrl}', '${fileName}');
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
  console.log('  –ü—Ä–æ–¥—É–∫—Ç—ã:', result.products.length);
  console.log('  –í—Ä–µ–º—è:', result.processingTimeMs + 'ms');
  console.log('  –ú–µ—Ç–æ–¥:', result.extractionMethods.bestMethod);
  console.log('  –û—à–∏–±–∫–∏:', result.errors.length);
  console.log('  –°—Ç–æ–∏–º–æ—Å—Ç—å: $' + result.costUsd);
  
  if (result.extractionMethods.step1_pdf_to_images) {
    console.log('  Step 1:', result.extractionMethods.step1_pdf_to_images);
  }
  if (result.extractionMethods.step2_gemini_flash_2_0) {
    console.log('  Step 2:', result.extractionMethods.step2_gemini_flash_2_0);
  }
  
  if (result.errors.length > 0) {
    console.log('‚ùå –û—à–∏–±–∫–∏:');
    result.errors.slice(0, 3).forEach((error, i) => {
      console.log('  ' + (i+1) + '. ' + error);
    });
  }
  
  return result;
}

testExtraction()
  .then(result => {
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
    process.exit(1);
  });
`;

    console.log('üìù –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
    
    // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const { spawn } = require('child_process');
    
    const sshProcess = spawn('ssh', [
      '-o', 'StrictHostKeyChecking=no',
      'root@209.38.85.196',
      `cd /opt/monito-web && cat > test-direct-extraction.js << 'EOF'${testScript}EOF`
    ]);

    sshProcess.on('close', async (code) => {
      if (code !== 0) {
        throw new Error(`Failed to create test script: ${code}`);
      }
      
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω');
      console.log('üèÉ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç...');
      console.log('');

      // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
      const runProcess = spawn('ssh', [
        '-o', 'StrictHostKeyChecking=no',
        'root@209.38.85.196',
        'cd /opt/monito-web && timeout 300 node test-direct-extraction.js'
      ], {
        stdio: 'inherit'
      });

      runProcess.on('close', (runCode) => {
        const totalTime = Date.now() - startTime;
        console.log('');
        console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${(totalTime/1000).toFixed(1)}s`);
        
        if (runCode === 0) {
          console.log('üéâ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!');
        } else {
          console.log(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${runCode}`);
        }
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç
if (require.main === module) {
  testDirectPdfExtractor().catch(error => {
    console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
    process.exit(1);
  });
}

module.exports = { testDirectPdfExtractor };
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function cleanupWidiWigunaPrices() {
  try {
    console.log('üßπ –û–ß–ò–°–¢–ö–ê –¶–ï–ù WIDI WIGUNA');
    console.log('=' .repeat(70));
    
    // Find Widi Wiguna supplier
    const widiSupplier = await prisma.supplier.findFirst({
      where: { name: 'Widi Wiguna' }
    });
    
    if (!widiSupplier) {
      console.log('‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ Widi Wiguna –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${widiSupplier.name} (${widiSupplier.id})`);
    
    // Find all products with multiple active prices for Widi Wiguna
    const productsWithMultiplePrices = await prisma.product.findMany({
      where: {
        prices: {
          some: {
            supplierId: widiSupplier.id,
            validTo: null
          }
        }
      },
      include: {
        prices: {
          where: {
            supplierId: widiSupplier.id,
            validTo: null
          },
          orderBy: {
            createdAt: 'desc'
          }
        }
      }
    });
    
    let totalProductsWithDuplicates = 0;
    let totalPricesRemoved = 0;
    let totalHistoryCreated = 0;
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ Widi Wiguna: ${productsWithMultiplePrices.length}`);
    
    for (const product of productsWithMultiplePrices) {
      if (product.prices.length <= 1) {
        continue; // Skip products with 0 or 1 price
      }
      
      totalProductsWithDuplicates++;
      
      console.log(`\\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${product.name} (${product.prices.length} —Ü–µ–Ω)`);
      
      // Keep the most recent price, remove the rest
      const [mostRecentPrice, ...oldPrices] = product.prices;
      
      for (const oldPrice of oldPrices) {
        // Create price history entry for the old price
        await prisma.priceHistory.create({
          data: {
            id: `widi_cleanup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            price: oldPrice.amount,
            unit: oldPrice.unit,
            changedFrom: null, // We don't know the previous price
            changePercentage: null,
            changeReason: 'widi_cleanup_duplicate_removal',
            productId: product.id,
            supplierId: widiSupplier.id,
            uploadId: oldPrice.uploadId,
            createdAt: oldPrice.createdAt // Use original creation date
          }
        });
        totalHistoryCreated++;
        
        // Mark old price as expired
        await prisma.price.update({
          where: { id: oldPrice.id },
          data: { 
            validTo: new Date()
          }
        });
        totalPricesRemoved++;
        
        console.log(`   ‚ùå –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç–Ω–∞—è —Ü–µ–Ω–∞: $${oldPrice.amount} ${oldPrice.unit} (${oldPrice.createdAt.toLocaleString()})`);
      }
      
      console.log(`   ‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞: $${mostRecentPrice.amount} ${mostRecentPrice.unit} (${mostRecentPrice.createdAt.toLocaleString()})`);
    }
    
    console.log(`\\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò WIDI WIGUNA:`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏: ${totalProductsWithDuplicates}`);
    console.log(`‚ùå –¶–µ–Ω –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: ${totalPricesRemoved}`);
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–æ: ${totalHistoryCreated}`);
    
    // Verify cleanup results for Widi Wiguna
    const remainingDuplicates = await prisma.product.findMany({
      where: {
        prices: {
          some: {
            supplierId: widiSupplier.id,
            validTo: null
          }
        }
      },
      include: {
        _count: {
          select: {
            prices: {
              where: {
                supplierId: widiSupplier.id,
                validTo: null
              }
            }
          }
        }
      }
    });
    
    const productsWithMultipleActivePrices = remainingDuplicates.filter(p => p._count.prices > 1);
    
    console.log(`\\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í WIDI WIGUNA:`);
    console.log(`‚úÖ –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–æ–π: ${remainingDuplicates.length - productsWithMultipleActivePrices.length}`);
    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${productsWithMultipleActivePrices.length}`);
    
    if (productsWithMultipleActivePrices.length === 0) {
      console.log(`\\nüéâ –û–ß–ò–°–¢–ö–ê WIDI WIGUNA –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!`);
      console.log(`‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã Widi Wiguna —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–Ω—É`);
      console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    } else {
      console.log(`\\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –û–ß–ò–°–¢–ö–ê WIDI WIGUNA`);
      console.log(`‚ùå –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–≤–∞—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏`);
      
      // Show remaining issues
      console.log(`\\nüîç –¢–û–í–ê–†–´ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò:`);
      productsWithMultipleActivePrices.forEach((product, index) => {
        console.log(`${index + 1}. ${product.name}: ${product._count.prices} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω`);
      });
    }
    
    return {
      success: true,
      productsProcessed: totalProductsWithDuplicates,
      pricesRemoved: totalPricesRemoved,
      historyCreated: totalHistoryCreated,
      remainingIssues: productsWithMultipleActivePrices.length
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ü–µ–Ω Widi Wiguna:', error.message);
    return {
      success: false,
      error: error.message
    };
  } finally {
    await prisma.$disconnect();
  }
}

cleanupWidiWigunaPrices();
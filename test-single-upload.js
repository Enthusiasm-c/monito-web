const fs = require('fs');
const path = require('path');

async function testSingleUpload() {
  try {
    console.log('üß™ –¢–ï–°–¢ –û–î–ò–ù–û–ß–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
    console.log('=' .repeat(60));
    
    // –í—ã–±—Ä–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π PDF —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    const testFile = 'Cheese work  04_07.pdf';
    const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';
    const filePath = path.join(supplierFolderPath, testFile);
    
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFile}`);
      return;
    }
    
    const fileBuffer = fs.readFileSync(filePath);
    const fileSize = Math.round(fileBuffer.length / 1024);
    
    console.log(`üìÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: ${testFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSize}KB`);
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: Cheese Work`);
    
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint GET
    console.log('\nüîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET endpoint...');
    const fetch = (await import('node-fetch')).default;
    
    try {
      const getResponse = await fetch('http://localhost:3000/api/upload-unified', {
        method: 'GET',
        timeout: 10000
      });
      
      if (getResponse.ok) {
        const getResult = await getResponse.json();
        console.log('‚úÖ GET endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${getResult.status}`);
        console.log(`   üîß –°–µ—Ä–≤–∏—Å: ${getResult.service}`);
        console.log(`   üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: ${getResult.supportedFileTypes?.length || 0}`);
      } else {
        console.log(`‚ùå GET endpoint –æ—à–∏–±–∫–∞: ${getResponse.status}`);
      }
    } catch (error) {
      console.log(`‚ùå GET endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      return;
    }
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    try {
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient({
        datasources: {
          db: {
            url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
          }
        }
      });
      
      const supplierCount = await prisma.supplier.count();
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      console.log(`   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –ë–î: ${supplierCount}`);
      await prisma.$disconnect();
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
      return;
    }
    
    // –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    console.log('\nüîç –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...');
    
    const FormData = require('form-data');
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: testFile,
      contentType: 'application/pdf'
    });
    form.append('supplierName', 'Cheese Work');
    
    const startTime = Date.now();
    
    try {
      const uploadResponse = await fetch('http://localhost:3000/api/upload-unified', {
        method: 'POST',
        body: form,
        headers: form.getHeaders(),
        timeout: 120000 // 2 –º–∏–Ω—É—Ç—ã
      });
      
      const endTime = Date.now();
      const processingTime = endTime - startTime;
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${Math.round(processingTime/1000)}s`);
      console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
      
      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorText}`);
        return;
      }
      
      const result = await uploadResponse.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${result.stats?.productsExtracted || 0}`);
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.stats?.processingTimeMs || 0}ms`);
      console.log(`   üîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${result.stats?.strategy}`);
      console.log(`   ü§ñ –ú–æ–¥–µ–ª—å: ${result.stats?.model}`);
      
      // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      console.log('\nüîç –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');
      
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
      
      const prisma2 = new (require('@prisma/client')).PrismaClient({
        datasources: {
          db: {
            url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
          }
        }
      });
      
      // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const recentUploads = await prisma2.upload.findMany({
        where: {
          createdAt: {
            gte: new Date(startTime)
          }
        },
        include: {
          supplier: true,
          _count: {
            select: {
              prices: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });
      
      if (recentUploads.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${recentUploads.length} –Ω–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –ë–î:`);
        recentUploads.forEach((upload, index) => {
          console.log(`   ${index + 1}. ${upload.originalName || upload.fileName}`);
          console.log(`      üè¢ ${upload.supplier.name}`);
          console.log(`      üì¶ ${upload._count.prices} —Ç–æ–≤–∞—Ä–æ–≤`);
          console.log(`      üìä ${upload.status}`);
          console.log(`      üìÖ ${upload.createdAt.toLocaleString()}`);
        });
      } else {
        console.log('‚ùå –ù–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –ë–î');
      }
      
      await prisma2.$disconnect();
      
      return {
        success: true,
        processingTime,
        productsExtracted: result.stats?.productsExtracted || 0,
        savedToDatabase: recentUploads.length > 0
      };
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testSingleUpload();
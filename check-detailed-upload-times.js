const { PrismaClient } = require('@prisma/client');

async function checkDetailedUploadTimes() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üïê –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫ Widi Wiguna...');
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å Widi –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const allWidiUploads = await prisma.upload.findMany({
      where: {
        fileName: {
          contains: 'Widi',
          mode: 'insensitive'
        }
      },
      include: {
        supplier: true,
        prices: {
          include: {
            product: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    });
    
    if (allWidiUploads.length === 0) {
      console.log('‚ùå –ó–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ Widi Wiguna –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allWidiUploads.length} –∑–∞–≥—Ä—É–∑–æ–∫ Widi Wiguna:`);
    
    allWidiUploads.forEach((upload, index) => {
      const startTime = upload.createdAt;
      const endTime = upload.updatedAt;
      const processingTimeMs = endTime.getTime() - startTime.getTime();
      const processingTimeSeconds = Math.round(processingTimeMs / 1000);
      
      console.log(`\n${index + 1}. ${upload.fileName}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${startTime.toISOString()}`);
      console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${endTime.toISOString()}`);
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTimeSeconds} —Å–µ–∫—É–Ω–¥ (${processingTimeMs}ms)`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
      console.log(`   üéØ –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${upload.prices?.length || 0}`);
      console.log(`   üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${upload.supplier?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
      if (upload.metadata) {
        try {
          const metadata = JSON.parse(upload.metadata);
          if (metadata.error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadata.error}`);
          }
          if (metadata.processor) {
            console.log(`   üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${metadata.processor}`);
          }
          if (metadata.extractionQuality !== undefined) {
            console.log(`   üìà –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: ${metadata.extractionQuality}`);
          }
          if (metadata.fallbackUsed) {
            console.log(`   ‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –º–µ—Ö–∞–Ω–∏–∑–º`);
          }
          if (metadata.totalProducts !== undefined) {
            console.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadata.totalProducts}`);
          }
        } catch (e) {
          console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
    });
    
    // –û—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Widi Wiguna
    console.log('\nüè™ –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Widi Wiguna:');
    const widiSupplier = await prisma.supplier.findFirst({
      where: {
        name: {
          contains: 'Widi',
          mode: 'insensitive'
        }
      },
      include: {
        prices: {
          where: {
            validTo: null // –¢–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
          },
          include: {
            product: true,
            upload: true
          },
          orderBy: {
            validFrom: 'desc'
          },
          take: 10
        }
      }
    });
    
    if (widiSupplier) {
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${widiSupplier.name}`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${widiSupplier.prices?.length || 0}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${widiSupplier.createdAt.toISOString()}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${widiSupplier.updatedAt.toISOString()}`);
      
      if (widiSupplier.prices && widiSupplier.prices.length > 0) {
        console.log(`\n   üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:`);
        widiSupplier.prices.slice(0, 5).forEach((price, index) => {
          console.log(`      ${index + 1}. ${price.product.name} - ${price.amount} ${price.unit}`);
          console.log(`         –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${price.validFrom.toISOString()}`);
          if (price.upload) {
            console.log(`         –ò–∑ –∑–∞–≥—Ä—É–∑–∫–∏: ${price.upload.fileName}`);
          }
        });
      }
    } else {
      console.log('   ‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ Widi Wiguna –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkDetailedUploadTimes();
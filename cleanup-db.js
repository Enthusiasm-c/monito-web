const { PrismaClient } = require('@prisma/client');

async function cleanupDatabase() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // 1. –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã Eggstra
    const eggstraFiles = await prisma.file.findMany({
      where: {
        fileName: {
          contains: 'EGGSTRA',
          mode: 'insensitive'
        }
      },
      include: {
        products: true,
        supplier: true
      }
    });
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${eggstraFiles.length} —Ñ–∞–π–ª–æ–≤ Eggstra –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`);
    eggstraFiles.forEach((file, i) => {
      console.log(`   ${i+1}. ${file.fileName} (${file.products.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
      console.log(`      –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${file.supplier?.name || 'N/A'}`);
      console.log(`      –î–∞—Ç–∞: ${file.createdAt.toISOString().split('T')[0]}`);
    });
    
    if (eggstraFiles.length === 0) {
      console.log('‚úÖ –§–∞–π–ª—ã Eggstra –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±–∞–∑–∞ —É–∂–µ —á–∏—Å—Ç–∞—è');
      return;
    }
    
    // 2. –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
    let totalDeletedProducts = 0;
    for (const file of eggstraFiles) {
      const deletedProducts = await prisma.product.deleteMany({
        where: { fileId: file.id }
      });
      totalDeletedProducts += deletedProducts.count;
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ${file.fileName}`);
    }
    
    // 3. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã
    const deletedFiles = await prisma.file.deleteMany({
      where: {
        fileName: {
          contains: 'EGGSTRA',
          mode: 'insensitive'
        }
      }
    });
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedFiles.count} —Ñ–∞–π–ª–æ–≤ Eggstra`);
    
    // 4. –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const suppliersToCheck = [...new Set(eggstraFiles.map(f => f.supplierId).filter(Boolean))];
    let deletedSuppliers = 0;
    
    for (const supplierId of suppliersToCheck) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ñ–∞–π–ª—ã —É —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      const remainingFiles = await prisma.file.findMany({
        where: { supplierId: supplierId }
      });
      
      if (remainingFiles.length === 0) {
        const supplier = await prisma.supplier.findUnique({
          where: { id: supplierId }
        });
        
        if (supplier) {
          await prisma.supplier.delete({
            where: { id: supplierId }
          });
          console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: "${supplier.name}"`);
          deletedSuppliers++;
        }
      }
    }
    
    // 5. –¢–∞–∫–∂–µ —É–¥–∞–ª–∏–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const suspiciousFiles = await prisma.file.findMany({
      include: {
        products: {
          take: 10 // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
        },
        supplier: true
      }
    });
    
    let additionalDeleted = 0;
    for (const file of suspiciousFiles) {
      // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
      const numericProducts = file.products.filter(p => 
        /^\d+$/.test(p.name.trim()) || // –ß–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        p.name.trim().length <= 3 && /\d/.test(p.name) // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏
      );
      
      if (numericProducts.length >= 3) { // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        console.log(`   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${file.fileName}`);
        console.log(`      –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${file.supplier?.name || 'N/A'}`);
        console.log(`      –ü—Ä–∏–º–µ—Ä—ã –ø–ª–æ—Ö–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${numericProducts.slice(0, 3).map(p => `"${p.name}"`).join(', ')}`);
        
        // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
        const deleted = await prisma.product.deleteMany({
          where: { fileId: file.id }
        });
        
        // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        await prisma.file.delete({
          where: { id: file.id }
        });
        
        console.log(`      ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∏ ${deleted.count} —Ç–æ–≤–∞—Ä–æ–≤`);
        additionalDeleted++;
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        if (file.supplierId) {
          const remainingFiles = await prisma.file.findMany({
            where: { supplierId: file.supplierId }
          });
          
          if (remainingFiles.length === 0) {
            await prisma.supplier.delete({
              where: { id: file.supplierId }
            });
            console.log(`      ‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: "${file.supplier?.name}"`);
          }
        }
      }
    }
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`   üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ:`);
    console.log(`      - –§–∞–π–ª–æ–≤ Eggstra: ${deletedFiles.count}`);
    console.log(`      - –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${additionalDeleted}`);
    console.log(`      - –¢–æ–≤–∞—Ä–æ–≤: ${totalDeletedProducts}`);
    console.log(`      - –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${deletedSuppliers}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
    const remainingFiles = await prisma.file.count();
    const remainingProducts = await prisma.product.count();
    const remainingSuppliers = await prisma.supplier.count();
    
    console.log('\nüìà –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`   - –§–∞–π–ª–æ–≤: ${remainingFiles}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${remainingProducts}`);
    console.log(`   - –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${remainingSuppliers}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupDatabase();
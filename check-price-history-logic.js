const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function checkPriceHistoryLogic() {
  try {
    console.log('üìà –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –•–†–ê–ù–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –¶–ï–ù');
    console.log('=' .repeat(70));
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Widi Wiguna, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const widiSupplier = await prisma.supplier.findFirst({
      where: { name: 'Widi Wiguna' }
    });
    
    if (!widiSupplier) {
      console.log('‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ Widi Wiguna –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üè¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${widiSupplier.name} (${widiSupplier.id})`);
    
    // –ù–∞–π–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const products = await prisma.product.findMany({
      where: {
        prices: {
          some: {
            supplierId: widiSupplier.id
          }
        }
      },
      include: {
        prices: {
          where: {
            supplierId: widiSupplier.id
          },
          orderBy: {
            createdAt: 'desc'
          }
        },
        priceHistory: {
          where: {
            supplierId: widiSupplier.id
          },
          orderBy: {
            createdAt: 'desc'
          }
        }
      },
      take: 5
    });
    
    console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${products.length}`);
    
    products.forEach((product, index) => {
      console.log(`\n${index + 1}. üì¶ –¢–æ–≤–∞—Ä: ${product.name}`);
      console.log(`   üí∞ –¢–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ prices: ${product.prices.length}`);
      console.log(`   üìà –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${product.priceHistory.length}`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
      if (product.prices.length > 0) {
        console.log(`   üí∞ –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´:`);
        product.prices.forEach((price, priceIndex) => {
          console.log(`      ${priceIndex + 1}. $${price.amount} ${price.unit} (—Å–æ–∑–¥–∞–Ω–æ: ${price.createdAt.toLocaleString()})`);
        });
      }
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
      if (product.priceHistory.length > 0) {
        console.log(`   üìà –ò–°–¢–û–†–ò–Ø –¶–ï–ù:`);
        product.priceHistory.forEach((history, histIndex) => {
          const changeInfo = history.changedFrom ? 
            ` (–±—ã–ª–æ $${history.changedFrom}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${history.changePercentage?.toFixed(1) || 'N/A'}%)` : 
            ' (–ø–µ—Ä–≤–∞—è —Ü–µ–Ω–∞)';
          console.log(`      ${histIndex + 1}. $${history.price} ${history.unit}${changeInfo}`);
          console.log(`         üìÖ ${history.createdAt.toLocaleString()} | –ü—Ä–∏—á–∏–Ω–∞: ${history.changeReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        });
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log(`   üîç –ê–ù–ê–õ–ò–ó:`);
      if (product.prices.length === 1 && product.priceHistory.length >= 1) {
        console.log(`      ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: 1 —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + ${product.priceHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
      } else if (product.prices.length > 1) {
        console.log(`      ‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã: ${product.prices.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`      üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è`);
      } else if (product.priceHistory.length === 0) {
        console.log(`      ‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
    
    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const productsWithMultiplePrices = await prisma.product.findMany({
      where: {
        prices: {
          some: {
            supplierId: widiSupplier.id
          }
        }
      },
      include: {
        _count: {
          select: {
            prices: true
          }
        }
      }
    });
    
    const multiPriceProducts = productsWithMultiplePrices.filter(p => p._count.prices > 1);
    const singlePriceProducts = productsWithMultiplePrices.filter(p => p._count.prices === 1);
    
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–æ–π —Ü–µ–Ω–æ–π: ${singlePriceProducts.length}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${multiPriceProducts.length}`);
    
    if (multiPriceProducts.length > 0) {
      console.log(`\n‚ö†Ô∏è –¢–û–í–ê–†–´ –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –¶–ï–ù–ê–ú–ò (–ø–µ—Ä–≤—ã–µ 5):`);
      multiPriceProducts.slice(0, 5).forEach((product, index) => {
        console.log(`${index + 1}. ${product.name}: ${product._count.prices} —Ü–µ–Ω`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayUploads = await prisma.upload.findMany({
      where: {
        supplierId: widiSupplier.id,
        createdAt: {
          gte: today
        }
      },
      include: {
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });
    
    console.log(`\nüì§ –ó–ê–ì–†–£–ó–ö–ò WIDI WIGUNA –°–ï–ì–û–î–ù–Ø: ${todayUploads.length}`);
    todayUploads.forEach((upload, index) => {
      console.log(`${index + 1}. ${upload.originalName} - ${upload._count.prices} —Ü–µ–Ω (${upload.createdAt.toLocaleString()})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ü–µ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù:');
    
    const duplicatePrices = await prisma.$queryRaw`
      SELECT 
        p.name as product_name,
        pr.amount,
        pr.unit,
        COUNT(*) as count,
        MIN(pr."createdAt") as first_created,
        MAX(pr."createdAt") as last_created
      FROM prices pr
      JOIN products p ON pr."productId" = p.id
      WHERE pr."supplierId" = ${widiSupplier.id}
      GROUP BY p.name, pr.amount, pr.unit
      HAVING COUNT(*) > 1
      ORDER BY COUNT(*) DESC
      LIMIT 5
    `;
    
    if (duplicatePrices.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicatePrices.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏:`);
      duplicatePrices.forEach((dup, index) => {
        console.log(`${index + 1}. ${dup.product_name}: $${dup.amount} ${dup.unit}`);
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${dup.count}`);
        console.log(`   üìÖ –ü–µ—Ä–≤–∞—è: ${new Date(dup.first_created).toLocaleString()}`);
        console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è: ${new Date(dup.last_created).toLocaleString()}`);
      });
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑—å –º–µ–∂–¥—É prices –∏ priceHistory
    console.log('\nüîó –°–í–Ø–ó–¨ –ú–ï–ñ–î–£ PRICES –ò PRICE_HISTORY:');
    
    const priceHistoryStats = await prisma.priceHistory.findMany({
      where: {
        supplierId: widiSupplier.id,
        createdAt: {
          gte: today
        }
      },
      select: {
        changeReason: true,
        changedFrom: true,
        price: true
      }
    });
    
    const reasonStats = priceHistoryStats.reduce((acc, record) => {
      const reason = record.changeReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      acc[reason] = (acc[reason] || 0) + 1;
      return acc;
    }, {});
    
    console.log('üìã –ü—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:');
    Object.entries(reasonStats).forEach(([reason, count]) => {
      console.log(`   ${reason}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    const newPrices = priceHistoryStats.filter(p => !p.changedFrom);
    const updatedPrices = priceHistoryStats.filter(p => p.changedFrom);
    
    console.log(`\nüìä –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π:`);
    console.log(`üÜï –ù–æ–≤—ã–µ —Ü–µ–Ω—ã: ${newPrices.length}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${updatedPrices.length}`);
    
    // –í—ã–≤–æ–¥—ã
    console.log('\nüéØ –í–´–í–û–î–´ –û –õ–û–ì–ò–ö–ï –•–†–ê–ù–ï–ù–ò–Ø –¶–ï–ù:');
    
    if (multiPriceProducts.length > 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¶–µ–Ω—ã –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–µ');
      console.log('üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –≤–µ–¥–µ—Ç—Å—è, –Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç –ø—É—Ç–∞–Ω–∏—Ü—É');
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ "–æ–¥–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + –∏—Å—Ç–æ—Ä–∏—è"');
    } else {
      console.log('‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: —Ü–µ–Ω—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –∏—Å—Ç–æ—Ä–∏—è –≤–µ–¥–µ—Ç—Å—è');
    }
    
    if (duplicatePrices.length > 0) {
      console.log('‚ö†Ô∏è –ï—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ü–µ–Ω—ã - –Ω—É–∂–Ω–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è');
    }
    
    if (newPrices.length > updatedPrices.length) {
      console.log('üìä –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π - –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã, –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
    
    return {
      supplier: widiSupplier.name,
      totalProducts: productsWithMultiplePrices.length,
      singlePriceProducts: singlePriceProducts.length,
      multiPriceProducts: multiPriceProducts.length,
      duplicatePrices: duplicatePrices.length,
      newPrices: newPrices.length,
      updatedPrices: updatedPrices.length,
      historyLogicWorking: priceHistoryStats.length > 0
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkPriceHistoryLogic();
const fs = require('fs');
const path = require('path');

async function testPdfQuotaHandling() {
  try {
    console.log('üß™ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò QUOTA EXHAUSTION –í PDF');
    console.log('=' .repeat(60));
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π PDF —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–≤–æ—Ç—ã
    const testFile = 'Cheese work  04_07.pdf';
    const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';
    const filePath = path.join(supplierFolderPath, testFile);
    
    if (!fs.existsSync(filePath)) {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFile}`);
      return;
    }
    
    const fileBuffer = fs.readFileSync(filePath);
    const fileSize = Math.round(fileBuffer.length / 1024);
    
    console.log(`üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSize}KB`);
    
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: testFile,
      contentType: 'application/pdf'
    });
    form.append('autoApprove', 'true');
    form.append('batchSize', '50');
    
    const startTime = Date.now();
    
    console.log('\nüîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ async-upload...');
    
    const uploadResponse = await fetch('http://localhost:3000/api/async-upload', {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
      timeout: 120000
    });
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${Math.round(processingTime/1000)}s`);
    console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
    
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorText}`);
      return;
    }
    
    const result = await uploadResponse.json();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
    console.log(`   üÜî Upload ID: ${result.uploadId}`);
    console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.status}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ –ë–î
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ë–î...');
    
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
        }
      }
    });
    
    const upload = await prisma.upload.findUnique({
      where: { id: result.uploadId },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      }
    });
    
    if (upload) {
      console.log(`\nüìä –î–ï–¢–ê–õ–ò –ó–ê–ì–†–£–ó–ö–ò:`);
      console.log(`üìÅ –§–∞–π–ª: ${upload.originalName}`);
      console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${upload.supplier.name}`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
      console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${upload._count.prices}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${upload.processingTimeMs}ms`);
      
      if (upload.errorMessage) {
        console.log(`\n‚ö†Ô∏è –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ê–•:`);
        const errorMsg = upload.errorMessage;
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–æ—Ç–µ
        if (errorMsg.includes('quota') || errorMsg.includes('exceeded') || errorMsg.includes('limit')) {
          console.log(`üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° –ö–í–û–¢–û–ô:`);
          console.log(`   ${errorMsg.substring(0, 200)}...`);
          console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
          console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ Gemini API`);
          console.log(`   2. –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –¥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ`);
          console.log(`   3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ`);
          console.log(`   4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π`);
        } else {
          console.log(`   –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: ${errorMsg.substring(0, 200)}...`);
        }
      } else {
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (upload.extractedData) {
        try {
          const extractedData = typeof upload.extractedData === 'string' 
            ? JSON.parse(upload.extractedData) 
            : upload.extractedData;
          
          console.log(`\nüî¨ –î–ï–¢–ê–õ–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:`);
          if (extractedData.quotaExhausted) {
            console.log(`üö´ –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞: ${extractedData.quotaErrorCount} –æ—à–∏–±–æ–∫`);
          }
          if (extractedData.extractionMethods) {
            const methods = extractedData.extractionMethods;
            console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${methods.step1_pdf_to_images?.images_created || 0}`);
            console.log(`ü§ñ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${methods.step2_gemini_flash_2_0?.images_processed || 0}`);
            console.log(`üö´ Quota –æ—à–∏–±–æ–∫: ${methods.step2_gemini_flash_2_0?.quota_errors || 0}`);
            if (methods.issues && methods.issues.length > 0) {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${methods.issues.join(', ')}`);
            }
          }
        } catch (e) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è`);
        }
      }
    }
    
    await prisma.$disconnect();
    
    console.log(`\nüéØ –í–´–í–û–î–´:`);
    if (upload._count.prices === 0) {
      console.log(`‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–æ 0 —Ç–æ–≤–∞—Ä–æ–≤ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–≤–æ—Ç–æ–π API`);
      console.log(`üí° –†–µ—à–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω Gemini API –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ`);
    } else {
      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${upload._count.prices} —Ç–æ–≤–∞—Ä–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
    }
    
    return {
      success: true,
      uploadId: result.uploadId,
      productsExtracted: upload._count.prices,
      quotaIssue: upload.errorMessage?.includes('quota') || false
    };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testPdfQuotaHandling();
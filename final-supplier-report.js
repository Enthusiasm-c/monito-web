const fs = require('fs');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function generateFinalReport() {
  try {
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í JULY 2025');
    console.log('=' .repeat(70));
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
    let bulkResults = {};
    try {
      const bulkFile = fs.readFileSync('bulk-upload-summary.json', 'utf8');
      bulkResults = JSON.parse(bulkFile);
    } catch (e) {
      console.log('‚ö†Ô∏è –§–∞–π–ª bulk-upload-summary.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const currentTime = new Date();
    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayUploads = await prisma.upload.findMany({
      where: {
        createdAt: {
          gte: startOfDay
        }
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      }
    });
    
    // –ù–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const newSuppliers = await prisma.supplier.findMany({
      where: {
        createdAt: {
          gte: startOfDay
        }
      },
      include: {
        _count: {
          select: {
            uploads: true,
            prices: true,
            priceHistory: true
          }
        }
      }
    });
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã
    const totalSuppliers = await prisma.supplier.count();
    const totalProducts = await prisma.product.count();
    const totalPrices = await prisma.price.count();
    const totalUploads = await prisma.upload.count();
    const totalPriceHistory = await prisma.priceHistory.count();
    
    console.log('\nüéØ –ò–¢–û–ì–ò –û–ü–ï–†–ê–¶–ò–ò:');
    console.log(`üìÖ –î–∞—Ç–∞: ${currentTime.toLocaleDateString()}`);
    console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${currentTime.toLocaleTimeString()}`);
    
    if (bulkResults.totalFiles) {
      console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${bulkResults.totalFiles}`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${bulkResults.successful} (${bulkResults.successRate}%)`);
      console.log(`‚ùå –û—à–∏–±–∫–∏: ${bulkResults.failed}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.floor(bulkResults.totalProcessingTime/60)}–º ${bulkResults.totalProcessingTime%60}—Å`);
      console.log(`üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${bulkResults.totalProductsExtracted}`);
    }
    
    console.log('\nüè¢ –ù–û–í–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (—Å–µ–≥–æ–¥–Ω—è):');
    if (newSuppliers.length > 0) {
      newSuppliers.forEach((supplier, index) => {
        console.log(`${index + 1}. ${supplier.name}`);
        console.log(`   üì§ –ó–∞–≥—Ä—É–∑–æ–∫: ${supplier._count.uploads}`);
        console.log(`   üí∞ –¶–µ–Ω: ${supplier._count.prices}`);
        console.log(`   üìà –ò—Å—Ç–æ—Ä–∏—è: ${supplier._count.priceHistory}`);
      });
    } else {
      console.log('üìù –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ');
    }
    
    console.log('\nüì§ –ó–ê–ì–†–£–ó–ö–ò –ó–ê –°–ï–ì–û–î–ù–Ø:');
    if (todayUploads.length > 0) {
      const groupedBySupplier = todayUploads.reduce((acc, upload) => {
        const supplierName = upload.supplier.name;
        if (!acc[supplierName]) {
          acc[supplierName] = { files: 0, products: 0, statuses: [] };
        }
        acc[supplierName].files++;
        acc[supplierName].products += upload._count.prices;
        acc[supplierName].statuses.push(upload.status);
        return acc;
      }, {});
      
      Object.entries(groupedBySupplier).forEach(([supplier, stats]) => {
        const successfulUploads = stats.statuses.filter(s => s === 'completed').length;
        console.log(`üìä ${supplier}: ${stats.files} —Ñ–∞–π–ª–æ–≤, ${stats.products} —Ç–æ–≤–∞—Ä–æ–≤ (${successfulUploads}/${stats.files} —É—Å–ø–µ—à–Ω–æ)`);
      });
    } else {
      console.log('üìù –ó–∞–≥—Ä—É–∑–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
    console.log(`üè¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${totalSuppliers}`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`üí∞ –í—Å–µ–≥–æ —Ü–µ–Ω: ${totalPrices}`);
    console.log(`üì§ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${totalUploads}`);
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${totalPriceHistory}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
    if (bulkResults.typeBreakdown) {
      Object.entries(bulkResults.typeBreakdown).forEach(([type, stats]) => {
        const avgTime = stats.successful > 0 ? Math.round(stats.totalTime / stats.successful / 1000) : 0;
        const avgProducts = stats.successful > 0 ? Math.round(stats.totalProducts / stats.successful) : 0;
        console.log(`üìã ${type}: ${avgTime}s/—Ñ–∞–π–ª, ${avgProducts} —Ç–æ–≤–∞—Ä–æ–≤/—Ñ–∞–π–ª`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω
    console.log('\nüí∞ –ú–ï–•–ê–ù–ò–ó–ú –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –¶–ï–ù:');
    const recentPriceChanges = await prisma.priceHistory.count({
      where: {
        createdAt: {
          gte: startOfDay
        }
      }
    });
    
    console.log(`üìà –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${recentPriceChanges}`);
    
    if (recentPriceChanges > 0) {
      const sampleChanges = await prisma.priceHistory.findMany({
        where: {
          createdAt: {
            gte: startOfDay
          }
        },
        include: {
          product: true,
          supplier: true
        },
        take: 5,
        orderBy: {
          createdAt: 'desc'
        }
      });
      
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:');
      sampleChanges.forEach((change, index) => {
        console.log(`${index + 1}. ${change.product.name} (${change.supplier.name}): $${change.price}`);
      });
    }
    
    // –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n‚ö†Ô∏è –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    
    const problemFiles = [];
    if (fs.existsSync('bulk-supplier-upload-report-1751699580450.json')) {
      const detailedReport = JSON.parse(fs.readFileSync('bulk-supplier-upload-report-1751699580450.json', 'utf8'));
      problemFiles.push(...detailedReport.errors);
    }
    
    if (problemFiles.length > 0) {
      problemFiles.forEach(error => {
        console.log(`‚ùå ${error.file}: ${error.error}`);
      });
    } else {
      console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    console.log('\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
    console.log('2. ‚ö†Ô∏è –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤—ã—à–µ 10MB –¥–ª—è –±–æ–ª—å—à–∏—Ö PDF');
    console.log('3. üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤');
    console.log('4. üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–æ–∫');
    console.log('5. üîÑ –î–æ–±–∞–≤–∏—Ç—å retry-–º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫');
    
    console.log('\n‚ú® –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('üéØ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('üí∞ –ú–µ—Ö–∞–Ω–∏–∑–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üè¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    console.log(`üìà –î–æ–±–∞–≤–ª–µ–Ω–æ ${newSuppliers.length} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É`);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const finalReport = {
      timestamp: currentTime.toISOString(),
      operation: 'Supplier July 2025 Bulk Upload',
      results: {
        totalFiles: bulkResults.totalFiles || 0,
        successful: bulkResults.successful || 0,
        failed: bulkResults.failed || 0,
        successRate: bulkResults.successRate || 0,
        processingTime: bulkResults.totalProcessingTime || 0,
        productsExtracted: bulkResults.totalProductsExtracted || 0
      },
      newSuppliers: newSuppliers.length,
      todayUploads: todayUploads.length,
      systemStats: {
        totalSuppliers,
        totalProducts,
        totalPrices,
        totalUploads,
        totalPriceHistory
      },
      priceTrackingActive: recentPriceChanges > 0,
      problems: problemFiles,
      systemReady: true
    };
    
    fs.writeFileSync('final-supplier-report.json', JSON.stringify(finalReport, null, 2));
    console.log('\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: final-supplier-report.json');
    
    return finalReport;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

generateFinalReport();
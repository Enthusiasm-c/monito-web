// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö processing uploads
const { PrismaClient } = require('@prisma/client');

async function forceFixProcessing() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîß Force fixing all processing uploads...');
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ uploads –≤ —Å—Ç–∞—Ç—É—Å–µ processing
    const processingUploads = await prisma.upload.findMany({
      where: {
        status: 'processing'
      }
    });
    
    console.log(`üìã Found ${processingUploads.length} processing uploads`);
    
    for (const upload of processingUploads) {
      console.log(`\nüîß Force fixing: ${upload.originalName} (${upload.id})`);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
      await prisma.upload.update({
        where: { id: upload.id },
        data: {
          status: 'failed',
          approvalStatus: 'rejected',
          errorMessage: 'AI processing timeout - this usually means the file format is not supported or the AI service is unavailable. Please try re-uploading.'
        }
      });
      
      console.log(`‚úÖ Fixed: ${upload.originalName}`);
    }
    
    console.log('\nüéâ All processing uploads have been fixed!');
    
  } catch (error) {
    console.error('‚ùå Force fix error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

forceFixProcessing();
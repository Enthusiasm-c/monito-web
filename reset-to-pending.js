// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å pending_review
const { PrismaClient } = require('@prisma/client');

async function resetToPendingReview() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ Resetting auto-processed uploads back to pending review...');
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ uploads –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω—ã
    const autoApprovedUploads = await prisma.upload.findMany({
      where: {
        status: 'completed',
        approvalStatus: 'approved',
        OR: [
          { autoApproved: true },
          { approvedBy: 'AI_SYSTEM' },
          { approvedBy: 'SYSTEM_REPROCESS' }
        ]
      },
      include: {
        prices: {
          include: {
            product: true
          }
        }
      }
    });
    
    console.log(`üìã Found ${autoApprovedUploads.length} auto-approved uploads to reset`);
    
    for (const upload of autoApprovedUploads) {
      console.log(`\nüîÑ Resetting upload: ${upload.originalName}`);
      
      // –£–¥–∞–ª—è–µ–º —Ü–µ–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º upload
      const deletedPrices = await prisma.price.deleteMany({
        where: { uploadId: upload.id }
      });
      
      console.log(`üóëÔ∏è Deleted ${deletedPrices.count} prices`);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ —Ü–µ–Ω (–∏ —É–¥–∞–ª—è–µ–º –∏—Ö)
      const productsWithoutPrices = await prisma.product.findMany({
        where: {
          prices: {
            none: {}
          }
        }
      });
      
      if (productsWithoutPrices.length > 0) {
        const deletedProducts = await prisma.product.deleteMany({
          where: {
            id: { in: productsWithoutPrices.map(p => p.id) }
          }
        });
        
        console.log(`üóëÔ∏è Deleted ${deletedProducts.count} orphaned products`);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º upload –≤ —Å—Ç–∞—Ç—É—Å pending_review
      await prisma.upload.update({
        where: { id: upload.id },
        data: {
          status: 'pending_review',
          approvalStatus: 'pending_review',
          autoApproved: false,
          approvedBy: null,
          approvedAt: null
        }
      });
      
      console.log(`‚úÖ Reset upload "${upload.originalName}" to pending_review`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalStats = {
      totalProducts: await prisma.product.count(),
      totalPrices: await prisma.price.count(),
      pendingUploads: await prisma.upload.count({
        where: {
          status: 'pending_review',
          approvalStatus: 'pending_review'
        }
      })
    };
    
    console.log('\nüìä Final statistics:');
    console.log('- Total products:', finalStats.totalProducts);
    console.log('- Total prices:', finalStats.totalPrices);
    console.log('- Pending uploads for admin review:', finalStats.pendingUploads);
    
    console.log('\nüéâ Reset completed! Now all uploads require manual admin approval.');
    
  } catch (error) {
    console.error('‚ùå Reset error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetToPendingReview();
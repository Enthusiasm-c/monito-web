/**
 * Test API analytics endpoint
 */

const fetch = require('node-fetch');

async function testAPIAnalytics() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ê–ù–ê–õ–ò–¢–ò–ö–ò');
    console.log('=' .repeat(40));
    
    // Test product analytics for a known product
    const productId = 'cmbzyfjtv0003s2w06smuyqge'; // Ciabatta
    
    console.log(`üìä –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${productId}`);
    
    const apiUrl = `http://localhost:3000/api/admin/analytics/prices?type=product&productId=${productId}`;
    console.log(`üîó URL: ${apiUrl}`);
    
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // Note: In production, this would require proper authentication
        'Cookie': 'session-token=test'
      }
    });
    
    console.log(`üì° HTTP Status: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      if (data.success) {
        console.log(`üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${data.data.productName}`);
        console.log(`üìä –¢–µ–∫—É—â–∏—Ö —Ü–µ–Ω: ${data.data.currentPrices.length}`);
        console.log(`üìà –ò—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${data.data.priceHistory.length}`);
        console.log(`üìÖ –¢–æ—á–µ–∫ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω: ${data.data.averagePriceHistory.length}`);
        
        // Show statistics
        const stats = data.data.statistics;
        console.log('\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(stats.currentAveragePrice).toLocaleString()} IDR`);
        console.log(`   –ú–∏–Ω. —Ü–µ–Ω–∞: ${Math.round(stats.currentMinPrice).toLocaleString()} IDR`);
        console.log(`   –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${Math.round(stats.currentMaxPrice).toLocaleString()} IDR`);
        console.log(`   –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${stats.supplierCount}`);
        console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–π: ${stats.totalPriceChanges}`);
        
        // Show current prices
        if (data.data.currentPrices.length > 0) {
          console.log('\nüíµ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:');
          data.data.currentPrices.forEach((price, index) => {
            console.log(`   ${index + 1}. ${Math.round(price.price).toLocaleString()} IDR - ${price.supplierName}`);
          });
        }
        
        // Show recent price history
        if (data.data.averagePriceHistory.length > 0) {
          console.log('\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–µ 5):');
          data.data.averagePriceHistory.slice(0, 5).forEach((point, index) => {
            const date = new Date(point.date).toLocaleDateString();
            const avgPrice = Math.round(point.averagePrice).toLocaleString();
            console.log(`   ${index + 1}. ${date} - ${avgPrice} IDR (–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${point.supplierCount})`);
          });
        }
        
        console.log('\n‚úÖ API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        console.log('üìñ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ');
        
      } else {
        console.log('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data.error);
      }
      
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
      console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:', errorText.substring(0, 500));
      
      if (response.status === 401) {
        console.log('üîê –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üîå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    }
  }
}

testAPIAnalytics();
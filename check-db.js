const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalFiles = await prisma.file.count();
    const totalProducts = await prisma.product.count();
    const totalSuppliers = await prisma.supplier.count();
    
    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –§–∞–π–ª–æ–≤: ${totalFiles}`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`   –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${totalSuppliers}\n`);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
    const recentFiles = await prisma.file.findMany({
      orderBy: { createdAt: 'desc' },
      take: 15,
      select: {
        id: true,
        fileName: true,
        status: true,
        createdAt: true,
        _count: {
          select: { products: true }
        },
        supplier: {
          select: { name: true }
        }
      }
    });
    
    console.log('üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:');
    recentFiles.forEach((file, i) => {
      const date = file.createdAt.toISOString().split('T')[0];
      const time = file.createdAt.toISOString().split('T')[1].split('.')[0];
      console.log(`   ${i+1}. ${file.fileName}`);
      console.log(`      ID: ${file.id}`);
      console.log(`      –¢–æ–≤–∞—Ä–æ–≤: ${file._count.products}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${file.status}`);
      console.log(`      –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${file.supplier?.name || 'N/A'}`);
      console.log(`      –î–∞—Ç–∞: ${date} ${time}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    const eggstraFiles = await prisma.file.findMany({
      where: {
        fileName: {
          contains: 'EGGSTRA',
          mode: 'insensitive'
        }
      },
      select: {
        id: true,
        fileName: true,
        status: true,
        createdAt: true,
        _count: {
          select: { products: true }
        }
      }
    });
    
    console.log(`ü•ö –§–∞–π–ª—ã Eggstra (${eggstraFiles.length}):`);
    eggstraFiles.forEach((file, i) => {
      console.log(`   ${i+1}. ${file.fileName} (ID: ${file.id})`);
      console.log(`      –¢–æ–≤–∞—Ä–æ–≤: ${file._count.products}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${file.status}`);
      console.log(`      –î–∞—Ç–∞: ${file.createdAt.toISOString()}`);
      console.log('');
    });
    
    const milkFiles = await prisma.file.findMany({
      where: {
        fileName: {
          contains: 'milk',
          mode: 'insensitive'
        }
      },
      select: {
        id: true,
        fileName: true,
        status: true,
        createdAt: true,
        _count: {
          select: { products: true }
        }
      }
    });
    
    console.log(`ü•õ –§–∞–π–ª—ã Milk Up (${milkFiles.length}):`);
    milkFiles.forEach((file, i) => {
      console.log(`   ${i+1}. ${file.fileName} (ID: ${file.id})`);
      console.log(`      –¢–æ–≤–∞—Ä–æ–≤: ${file._count.products}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${file.status}`);
      console.log(`      –î–∞—Ç–∞: ${file.createdAt.toISOString()}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function generatePriceHistoryFixReport() {
  try {
    console.log('üìä –û–¢–ß–ï–¢ –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –õ–û–ì–ò–ö–ò –ò–°–¢–û–†–ò–ò –¶–ï–ù');
    console.log('=' .repeat(70));
    
    // Overall statistics
    const totalProducts = await prisma.product.count();
    
    // Products with single active price
    const singleActivePriceQuery = `
      SELECT COUNT(*) as count
      FROM products p
      WHERE (
        SELECT COUNT(*)
        FROM prices pr
        WHERE pr."productId" = p.id
        AND pr."validTo" IS NULL
      ) = 1
    `;
    
    const singleActivePriceResult = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM products p
      WHERE (
        SELECT COUNT(*)
        FROM prices pr
        WHERE pr."productId" = p.id
        AND pr."validTo" IS NULL
      ) = 1
    `;
    
    // Products with multiple active prices
    const multipleActivePriceResult = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM products p
      WHERE (
        SELECT COUNT(*)
        FROM prices pr
        WHERE pr."productId" = p.id
        AND pr."validTo" IS NULL
      ) > 1
    `;
    
    // Products with no active prices
    const noActivePriceResult = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM products p
      WHERE (
        SELECT COUNT(*)
        FROM prices pr
        WHERE pr."productId" = p.id
        AND pr."validTo" IS NULL
      ) = 0
    `;
    
    const singleCount = Number(singleActivePriceResult[0].count);
    const multipleCount = Number(multipleActivePriceResult[0].count);
    const noneCount = Number(noActivePriceResult[0].count);
    
    console.log(`\\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–û–í–ê–†–ê–ú:`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalProducts}`);
    console.log(`‚úÖ –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–æ–π: ${singleCount}`);
    console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${multipleCount}`);
    console.log(`‚ùå –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: ${noneCount}`);
    
    // Calculate success percentage
    const successPercentage = totalProducts > 0 ? ((singleCount / totalProducts) * 100).toFixed(1) : 0;
    
    console.log(`\\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò–í–ù–û–°–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —Ü–µ–Ω`);
    
    // Check price history statistics
    const totalPriceHistory = await prisma.priceHistory.count();
    const todayPriceHistory = await prisma.priceHistory.count({
      where: {
        createdAt: {
          gte: new Date(new Date().setHours(0, 0, 0, 0))
        }
      }
    });
    
    console.log(`\\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ò –¶–ï–ù:`);
    console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: ${totalPriceHistory}`);
    console.log(`üÜï –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayPriceHistory}`);
    
    // Analyze change reasons
    const changeReasons = await prisma.$queryRaw`
      SELECT "changeReason", COUNT(*) as count
      FROM price_history
      WHERE "createdAt" >= CURRENT_DATE
      GROUP BY "changeReason"
      ORDER BY count DESC
    `;
    
    console.log(`\\nüîç –ü–†–ò–ß–ò–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô –¶–ï–ù (—Å–µ–≥–æ–¥–Ω—è):`);
    changeReasons.forEach((reason, index) => {
      console.log(`${index + 1}. ${reason.changeReason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}: ${reason.count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // Check specific suppliers
    const supplierStats = await prisma.$queryRaw`
      SELECT 
        s.name as supplier_name,
        COUNT(DISTINCT p.id) as total_products,
        COUNT(CASE WHEN price_count.count = 1 THEN 1 END) as single_price_products,
        COUNT(CASE WHEN price_count.count > 1 THEN 1 END) as multiple_price_products
      FROM suppliers s
      LEFT JOIN (
        SELECT 
          pr."supplierId",
          pr."productId",
          COUNT(*) as count
        FROM prices pr
        WHERE pr."validTo" IS NULL
        GROUP BY pr."supplierId", pr."productId"
      ) price_count ON s.id = price_count."supplierId"
      LEFT JOIN products p ON p.id = price_count."productId"
      WHERE s.name IN ('Widi Wiguna', 'Bali Boga', 'Sai Fresh', 'Island Organics Bali')
      GROUP BY s.name
      ORDER BY total_products DESC
    `;
    
    console.log(`\\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–õ–Æ–ß–ï–í–´–ú –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:`);
    supplierStats.forEach((supplier, index) => {
      const total = Number(supplier.total_products) || 0;
      const single = Number(supplier.single_price_products) || 0;
      const multiple = Number(supplier.multiple_price_products) || 0;
      const percentage = total > 0 ? ((single / total) * 100).toFixed(1) : 0;
      
      console.log(`${index + 1}. ${supplier.supplier_name}:`);
      console.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${total}`);
      console.log(`   ‚úÖ –° –æ–¥–Ω–æ–π —Ü–µ–Ω–æ–π: ${single} (${percentage}%)`);
      console.log(`   ‚ö†Ô∏è –° –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: ${multiple}`);
    });
    
    // Code changes implemented
    console.log(`\\nüîß –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`);
    console.log(`‚úÖ 1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ storeExtractedProducts –≤ enhancedFileProcessor.ts`);
    console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–Ω`);
    console.log(`   - –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π priceHistory –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω`);
    console.log(`   - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω`);
    console.log(`   - –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ validTo –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ü–µ–Ω`);
    console.log(`\\n‚úÖ 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–µ–Ω`);
    console.log(`   - –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã`);
    console.log(`   - –°–æ–∑–¥–∞–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    console.log(`   - –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ü–µ–Ω—ã`);
    
    // Current status assessment
    console.log(`\\nüéØ –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:`);
    
    if (successPercentage >= 90) {
      console.log(`üéâ –û–¢–õ–ò–ß–ù–û: ${successPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —Ü–µ–Ω`);
      console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ`);
      console.log(`‚úÖ –õ–æ–≥–∏–∫–∞ "–æ–¥–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ + –∏—Å—Ç–æ—Ä–∏—è" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    } else if (successPercentage >= 75) {
      console.log(`üëç –•–û–†–û–®–û: ${successPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —Ü–µ–Ω`);
      console.log(`‚ö†Ô∏è –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π`);
      console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    } else {
      console.log(`‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: —Ç–æ–ª—å–∫–æ ${successPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
      console.log(`‚ùå –õ–æ–≥–∏–∫–∞ —Ü–µ–Ω —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
      console.log(`üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞`);
    }
    
    // Recommendations
    console.log(`\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    
    if (multipleCount > 0) {
      console.log(`1. üßπ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É ${multipleCount} —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏`);
    }
    
    if (noneCount > 0) {
      console.log(`2. üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å ${noneCount} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω`);
    }
    
    console.log(`3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏`);
    console.log(`4. üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–µ–Ω`);
    console.log(`5. üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ`);
    
    // Final assessment
    console.log(`\\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:`);
    console.log(`üìà –õ–æ–≥–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞`);
    console.log(`üîß –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    console.log(`üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–±–ª–µ–º`);
    console.log(`üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`);
    
    if (successPercentage >= 75) {
      console.log(`‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã`);
    } else {
      console.log(`‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–¢–ò–ß–ù–û: —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞`);
    }
    
    return {
      totalProducts,
      singleActivePrices: singleCount,
      multipleActivePrices: multipleCount,
      noActivePrices: noneCount,
      successPercentage: parseFloat(successPercentage),
      totalPriceHistory,
      todayPriceHistory,
      status: successPercentage >= 75 ? 'success' : 'partial'
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
    return {
      success: false,
      error: error.message
    };
  } finally {
    await prisma.$disconnect();
  }
}

generatePriceHistoryFixReport();
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
const supportedExtensions = ['.pdf', '.xlsx', '.xls', '.csv', '.jpg', '.jpeg', '.png'];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
const uploadResults = {
  total: 0,
  successful: 0,
  failed: 0,
  suppliers: {},
  errors: [],
  uploadIds: []
};

async function bulkAsyncUpload() {
  try {
    console.log('üè¢ –ú–ê–°–°–û–í–ê–Ø ASYNC –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–¢–ê–í–©–ò–ö–û–í JULY 2025');
    console.log('=' .repeat(70));
    console.log(`üìÅ –ü–∞–ø–∫–∞: ${supplierFolderPath}`);
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    const files = fs.readdirSync(supplierFolderPath);
    const supportedFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return supportedExtensions.includes(ext);
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${supportedFiles.length}`);
    
    if (supportedFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ PDF, –ø–æ—Ç–æ–º Excel, –ø–æ—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const pdfFiles = supportedFiles.filter(f => f.toLowerCase().endsWith('.pdf'));
    const excelFiles = supportedFiles.filter(f => f.toLowerCase().endsWith('.xlsx') || f.toLowerCase().endsWith('.xls'));
    const imageFiles = supportedFiles.filter(f => f.toLowerCase().match(/\.(jpg|jpeg|png)$/));
    
    // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–∞–ª–µ–Ω—å–∫–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    const sortedPdfFiles = pdfFiles.map(file => {
      const filePath = path.join(supplierFolderPath, file);
      const size = fs.statSync(filePath).size;
      return { file, size };
    }).sort((a, b) => a.size - b.size).map(item => item.file);
    
    const sortedFiles = [...excelFiles, ...imageFiles, ...sortedPdfFiles];
    
    console.log('\nüìã –ü–õ–ê–ù –ó–ê–ì–†–£–ó–ö–ò:');
    console.log(`üìä Excel —Ñ–∞–π–ª—ã: ${excelFiles.length}`);
    console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageFiles.length}`);  
    console.log(`üìÑ PDF —Ñ–∞–π–ª—ã: ${sortedPdfFiles.length} (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É)`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    console.log('\nüìè –†–ê–ó–ú–ï–†–´ PDF –§–ê–ô–õ–û–í:');
    sortedPdfFiles.slice(0, 10).forEach(file => {
      const filePath = path.join(supplierFolderPath, file);
      const sizeMB = (fs.statSync(filePath).size / 1024 / 1024).toFixed(1);
      console.log(`   ${file}: ${sizeMB}MB`);
    });
    
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£...\n');
    uploadResults.total = sortedFiles.length;
    
    const startTime = Date.now();
    
    // –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
    for (let i = 0; i < sortedFiles.length; i++) {
      const file = sortedFiles[i];
      const supplierName = extractSupplierName(file);
      const fileType = getFileType(file);
      const filePath = path.join(supplierFolderPath, file);
      const fileSizeMB = (fs.statSync(filePath).size / 1024 / 1024).toFixed(1);
      
      console.log(`üìÑ [${i+1}/${sortedFiles.length}] ${file}`);
      console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplierName}`);
      console.log(`üìã –¢–∏–ø: ${fileType} | üìè –†–∞–∑–º–µ—Ä: ${fileSizeMB}MB`);
      
      // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 10MB (–ª–∏–º–∏—Ç API)
      if (fs.statSync(filePath).size > 10 * 1024 * 1024) {
        console.log(`   ‚ö†Ô∏è –§–∞–π–ª –±–æ–ª—å—à–µ 10MB - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        uploadResults.failed++;
        uploadResults.errors.push({
          file,
          supplier: supplierName,
          type: fileType,
          error: 'File size exceeds 10MB limit'
        });
        continue;
      }
      
      try {
        const result = await uploadSingleFileAsync(file, supplierName);
        
        if (result.success) {
          uploadResults.successful++;
          uploadResults.uploadIds.push(result.uploadId);
          
          if (!uploadResults.suppliers[supplierName]) {
            uploadResults.suppliers[supplierName] = {
              files: 0,
              uploadIds: [],
              types: []
            };
          }
          
          uploadResults.suppliers[supplierName].files++;
          uploadResults.suppliers[supplierName].uploadIds.push(result.uploadId);
          uploadResults.suppliers[supplierName].types.push(fileType);
          
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ID ${result.uploadId}`);
          console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.status || 'pending'}`);
        } else {
          uploadResults.failed++;
          uploadResults.errors.push({
            file,
            supplier: supplierName,
            type: fileType,
            error: result.error
          });
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
      } catch (error) {
        uploadResults.failed++;
        uploadResults.errors.push({
          file,
          supplier: supplierName,
          type: fileType,
          error: error.message
        });
        console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      }
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      const remaining = sortedFiles.length - (i + 1);
      const avgTimePerFile = elapsed / (i + 1);
      const estimatedRemaining = Math.round(remaining * avgTimePerFile);
      
      console.log(`   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ: ${elapsed}s | –û—Å—Ç–∞–ª–æ—Å—å: ~${estimatedRemaining}s | –§–∞–π–ª–æ–≤: ${remaining}`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
      const pauseTime = fileType === 'Excel' ? 2000 : 3000;
      console.log(`   ‚è≥ –ü–∞—É–∑–∞ ${pauseTime/1000}s...\n`);
      await sleep(pauseTime);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    const totalTime = Math.round((Date.now() - startTime) / 1000);
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ó–ê–ì–†–£–ó–ö–ò');
    console.log('=' .repeat(70));
    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.floor(totalTime/60)}–º ${totalTime%60}—Å`);
    console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${uploadResults.total}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${uploadResults.successful}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${uploadResults.failed}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((uploadResults.successful / uploadResults.total) * 100)}%`);
    console.log(`üÜî Upload IDs —Å–æ–∑–¥–∞–Ω–æ: ${uploadResults.uploadIds.length}`);
    
    console.log('\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:');
    Object.entries(uploadResults.suppliers).forEach(([supplier, stats]) => {
      console.log(`üìä ${supplier}:`);
      console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${stats.files}`);
      console.log(`   üÜî IDs: ${stats.uploadIds.join(', ')}`);
      console.log(`   üìã –¢–∏–ø—ã: ${[...new Set(stats.types)].join(', ')}`);
    });
    
    if (uploadResults.failed > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      uploadResults.errors.forEach(error => {
        console.log(`   ${error.file} (${error.supplier}, ${error.type}): ${error.error}`);
      });
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–û–ö (60 —Å–µ–∫—É–Ω–¥)...');
    await sleep(60000);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
    await checkDatabaseResults();
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
    const reportFile = `bulk-async-upload-report-${Date.now()}.json`;
    fs.writeFileSync(reportFile, JSON.stringify(uploadResults, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
    
    return uploadResults;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
  }
}

async function uploadSingleFileAsync(fileName, supplierName) {
  try {
    const filePath = path.join(supplierFolderPath, fileName);
    const fileBuffer = fs.readFileSync(filePath);
    
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: fileName,
      contentType: getMimeType(fileName)
    });
    form.append('autoApprove', 'true');
    form.append('batchSize', '50');
    
    const startTime = Date.now();
    
    const response = await fetch('http://localhost:3000/api/async-upload', {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
      timeout: 120000 // 2 –º–∏–Ω—É—Ç—ã
    });
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    if (!response.ok) {
      const errorText = await response.text();
      return {
        success: false,
        error: `HTTP ${response.status}: ${errorText.substring(0, 100)}...`,
        processingTime
      };
    }
    
    const result = await response.json();
    
    return {
      success: true,
      processingTime,
      uploadId: result.uploadId,
      status: result.status,
      message: result.message
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message,
      processingTime: 0
    };
  }
}

async function checkDatabaseResults() {
  try {
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –ë–î...');
    
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
        }
      }
    });
    
    // –ù–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ ID
    const foundUploads = await prisma.upload.findMany({
      where: {
        id: {
          in: uploadResults.uploadIds
        }
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${foundUploads.length}/${uploadResults.uploadIds.length} –∑–∞–≥—Ä—É–∑–æ–∫`);
    
    let totalProductsFound = 0;
    const statusCounts = {};
    
    foundUploads.forEach((upload, index) => {
      console.log(`${index + 1}. ${upload.originalName || upload.fileName} (${upload.supplier.name})`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status} | üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${upload._count.prices}`);
      console.log(`   üÜî ID: ${upload.id}`);
      
      totalProductsFound += upload._count.prices;
      statusCounts[upload.status] = (statusCounts[upload.status] || 0) + 1;
      
      if (upload.errorMessage) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∏: ${upload.errorMessage.substring(0, 100)}...`);
      }
    });
    
    console.log(`\nüìà –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${totalProductsFound}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∑–æ–∫:`);
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`   ${status}: ${count} –∑–∞–≥—Ä—É–∑–æ–∫`);
    });
    
    await prisma.$disconnect();
    
    return {
      foundUploads: foundUploads.length,
      totalProducts: totalProductsFound,
      statusCounts
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
  }
}

function extractSupplierName(fileName) {
  let name = fileName.replace(/\.(pdf|xlsx|xls|csv|jpg|jpeg|png|docx)$/i, '');
  name = name.replace(/\s+\d{2}_\d{2}.*$/, '');
  name = name.replace(/\s+\d+$/, '');
  name = name.trim()
    .replace(/\s+/g, ' ')
    .replace(/^(PT\.?|CV)\s*/i, '')
    .replace(/\+/g, ' ')
    .toLowerCase()
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  return name;
}

function getFileType(fileName) {
  const ext = path.extname(fileName).toLowerCase();
  if (['.xlsx', '.xls'].includes(ext)) return 'Excel';
  if (ext === '.pdf') return 'PDF';
  if (['.jpg', '.jpeg', '.png'].includes(ext)) return 'Image';
  if (ext === '.docx') return 'DOCX';
  if (ext === '.csv') return 'CSV';
  return 'Unknown';
}

function getMimeType(fileName) {
  const ext = path.extname(fileName).toLowerCase();
  const mimeTypes = {
    '.pdf': 'application/pdf',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.csv': 'text/csv',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  };
  return mimeTypes[ext] || 'application/octet-stream';
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏
bulkAsyncUpload();
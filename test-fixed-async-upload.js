const fs = require('fs');
const path = require('path');

async function testFixedAsyncUpload() {
  try {
    console.log('üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û ASYNC-UPLOAD');
    console.log('=' .repeat(60));
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const testFiles = [
      'AF Seafood 03_07.pdf', // –ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
      'PT.Bali boga sejati 03_07.pdf', // –î–æ–ª–∂–µ–Ω –º–∞–ø–ø–∏—Ç—å—Å—è –∫ Bali Boga
      'SAI FRESH 03_07.pdf' // –î–æ–ª–∂–µ–Ω –º–∞–ø–ø–∏—Ç—å—Å—è –∫ Sai Fresh
    ];
    
    const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';
    const results = [];
    
    for (const testFile of testFiles) {
      const filePath = path.join(supplierFolderPath, testFile);
      
      if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFile}`);
        continue;
      }
      
      const fileBuffer = fs.readFileSync(filePath);
      const fileSize = Math.round(fileBuffer.length / 1024);
      
      console.log(`\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testFile}`);
      console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileSize}KB`);
      
      try {
        const fetch = (await import('node-fetch')).default;
        const FormData = require('form-data');
        
        const form = new FormData();
        form.append('file', fileBuffer, {
          filename: testFile,
          contentType: 'application/pdf'
        });
        form.append('autoApprove', 'true');
        form.append('batchSize', '50');
        // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º supplierName, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        const startTime = Date.now();
        
        const uploadResponse = await fetch('http://localhost:3000/api/async-upload', {
          method: 'POST',
          body: form,
          headers: form.getHeaders(),
          timeout: 120000
        });
        
        const endTime = Date.now();
        const processingTime = endTime - startTime;
        
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${Math.round(processingTime/1000)}s`);
        console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${uploadResponse.status}`);
        
        if (!uploadResponse.ok) {
          const errorText = await uploadResponse.text();
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${errorText}`);
          results.push({
            file: testFile,
            success: false,
            error: errorText
          });
          continue;
        }
        
        const result = await uploadResponse.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞`);
        console.log(`   üÜî Upload ID: ${result.uploadId}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${result.status}`);
        
        results.push({
          file: testFile,
          success: true,
          uploadId: result.uploadId,
          status: result.status,
          processingTime
        });
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
        results.push({
          file: testFile,
          success: false,
          error: error.message
        });
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•...');
    
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
        }
      }
    });
    
    const uploadIds = results.filter(r => r.success).map(r => r.uploadId);
    
    if (uploadIds.length > 0) {
      const uploads = await prisma.upload.findMany({
        where: {
          id: {
            in: uploadIds
          }
        },
        include: {
          supplier: true,
          _count: {
            select: {
              prices: true
            }
          }
        }
      });
      
      console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${uploads.length} –∑–∞–≥—Ä—É–∑–æ–∫`);
      
      uploads.forEach((upload, index) => {
        console.log(`\n${index + 1}. ${upload.originalName || upload.fileName}`);
        console.log(`   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${upload.supplier.name} (${upload.supplier.id})`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
        console.log(`   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${upload._count.prices}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–æ: ${upload.createdAt.toLocaleString()}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const expectedMappings = {
          'AF Seafood 03_07.pdf': ['Af Seafood', 'AF Seafood'],
          'PT.Bali boga sejati 03_07.pdf': ['Bali Boga', 'Bali Boga Sejati'],
          'SAI FRESH 03_07.pdf': ['Sai Fresh', 'SAI FRESH']
        };
        
        const expected = expectedMappings[upload.originalName || upload.fileName];
        if (expected && expected.some(name => upload.supplier.name.includes(name))) {
          console.log(`   ‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
        } else if (upload.supplier.name === 'Temporary Processing') {
          console.log(`   ‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –ø–æ–ø–∞–ª –≤ Temporary Processing`);
        } else {
          console.log(`   üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
      const newSuppliers = await prisma.supplier.findMany({
        where: {
          createdAt: {
            gte: new Date(Date.now() - 10 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
          }
        }
      });
      
      if (newSuppliers.length > 0) {
        console.log(`\nüÜï –ù–û–í–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç):`);
        newSuppliers.forEach((supplier, index) => {
          console.log(`${index + 1}. ${supplier.name} (${supplier.id})`);
          console.log(`   üìß Email: ${supplier.email}`);
          console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${supplier.createdAt.toLocaleString()}`);
        });
      }
    }
    
    await prisma.$disconnect();
    
    // –ò—Ç–æ–≥–∏
    console.log(`\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
    console.log(`üìä –§–∞–π–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${results.filter(r => !r.success).length}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testFixedAsyncUpload();
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
const supplierFolderPath = '/Users/denisdomashenko/Downloads/ SUPPLIER JULY 2025';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
const supportedExtensions = ['.pdf', '.xlsx', '.xls', '.csv', '.jpg', '.jpeg', '.png', '.docx'];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
const uploadResults = {
  total: 0,
  successful: 0,
  failed: 0,
  suppliers: {},
  errors: []
};

async function bulkUploadSuppliers() {
  try {
    console.log('üè¢ –ú–ê–°–°–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ü–û–°–¢–ê–í–©–ò–ö–û–í');
    console.log('=' .repeat(60));
    console.log(`üìÅ –ü–∞–ø–∫–∞: ${supplierFolderPath}`);
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    const files = fs.readdirSync(supplierFolderPath);
    const supportedFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return supportedExtensions.includes(ext);
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: ${supportedFiles.length}`);
    console.log(`üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length - supportedFiles.length}`);
    
    if (supportedFiles.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }
    
    // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('\nüìã –§–ê–ô–õ–´ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò:');
    supportedFiles.forEach((file, index) => {
      const supplierName = extractSupplierName(file);
      console.log(`${index + 1}. ${file} ‚Üí ${supplierName}`);
    });
    
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£...\n');
    uploadResults.total = supportedFiles.length;
    
    // –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
    for (const file of supportedFiles) {
      const supplierName = extractSupplierName(file);
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º: ${file}`);
      console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${supplierName}`);
      
      try {
        const result = await uploadSingleFile(file, supplierName);
        
        if (result.success) {
          uploadResults.successful++;
          
          if (!uploadResults.suppliers[supplierName]) {
            uploadResults.suppliers[supplierName] = {
              files: 0,
              products: 0,
              avgTime: 0,
              times: []
            };
          }
          
          uploadResults.suppliers[supplierName].files++;
          uploadResults.suppliers[supplierName].products += result.productsCount;
          uploadResults.suppliers[supplierName].times.push(result.processingTime);
          uploadResults.suppliers[supplierName].avgTime = Math.round(
            uploadResults.suppliers[supplierName].times.reduce((a, b) => a + b, 0) / 
            uploadResults.suppliers[supplierName].times.length
          );
          
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.productsCount} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${result.processingTime}ms`);
        } else {
          uploadResults.failed++;
          uploadResults.errors.push({
            file,
            supplier: supplierName,
            error: result.error
          });
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
      } catch (error) {
        uploadResults.failed++;
        uploadResults.errors.push({
          file,
          supplier: supplierName,
          error: error.message
        });
        console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
      console.log('   ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...\n');
      await sleep(2000);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ó–ê–ì–†–£–ó–ö–ò');
    console.log('=' .repeat(50));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${uploadResults.total}`);
    console.log(`–£—Å–ø–µ—à–Ω–æ: ${uploadResults.successful}`);
    console.log(`–ù–µ—É–¥–∞—á–Ω–æ: ${uploadResults.failed}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((uploadResults.successful / uploadResults.total) * 100)}%`);
    
    console.log('\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:');
    for (const [supplier, stats] of Object.entries(uploadResults.suppliers)) {
      console.log(`üìä ${supplier}:`);
      console.log(`   –§–∞–π–ª–æ–≤: ${stats.files}`);
      console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${stats.products}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.avgTime}ms`);
    }
    
    if (uploadResults.failed > 0) {
      console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
      uploadResults.errors.forEach(error => {
        console.log(`   ${error.file} (${error.supplier}): ${error.error}`);
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
    const reportFile = `supplier-upload-report-${Date.now()}.json`;
    fs.writeFileSync(reportFile, JSON.stringify(uploadResults, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
    
    return uploadResults;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
  }
}

async function uploadSingleFile(fileName, supplierName) {
  try {
    const filePath = path.join(supplierFolderPath, fileName);
    const fileBuffer = fs.readFileSync(filePath);
    const mimeType = getMimeType(fileName);
    
    const fetch = (await import('node-fetch')).default;
    const FormData = require('form-data');
    
    const form = new FormData();
    form.append('file', fileBuffer, {
      filename: fileName,
      contentType: mimeType
    });
    form.append('supplierName', supplierName);
    
    const startTime = Date.now();
    
    const response = await fetch('http://localhost:3000/api/upload-unified', {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
      timeout: 120000 // 2 –º–∏–Ω—É—Ç—ã
    });
    
    const endTime = Date.now();
    const processingTime = endTime - startTime;
    
    if (!response.ok) {
      const errorText = await response.text();
      return {
        success: false,
        error: `HTTP ${response.status}: ${errorText}`,
        processingTime
      };
    }
    
    const result = await response.json();
    
    return {
      success: true,
      processingTime,
      productsCount: result.stats?.productsExtracted || 0,
      data: result
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message,
      processingTime: 0
    };
  }
}

function extractSupplierName(fileName) {
  // –ò–∑–≤–ª–µ—á—å –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  let name = fileName.replace(/\.(pdf|xlsx|xls|csv|jpg|jpeg|png|docx)$/i, '');
  
  // –£–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD_MM
  name = name.replace(/\s+\d{2}_\d{2}.*$/, '');
  
  // –£–±—Ä–∞—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "1", "2")
  name = name.replace(/\s+\d+$/, '');
  
  // –û—á–∏—Å—Ç–∏—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å
  name = name.trim()
    .replace(/\s+/g, ' ')
    .replace(/^(PT\.?|CV)\s*/i, '') // –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã PT, CV
    .toLowerCase()
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  
  return name;
}

function getMimeType(fileName) {
  const ext = path.extname(fileName).toLowerCase();
  const mimeTypes = {
    '.pdf': 'application/pdf',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.csv': 'text/csv',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  };
  return mimeTypes[ext] || 'application/octet-stream';
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏
bulkUploadSuppliers();
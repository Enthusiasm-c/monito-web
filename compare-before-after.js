const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function compareBeforeAfter() {
  try {
    console.log('üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–û –ò –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò JULY 2025');
    console.log('=' .repeat(70));
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º)
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    console.log(`üìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å ${today.toLocaleDateString()} (–Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–æ–∫ July 2025)`);
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –î–û –∑–∞–≥—Ä—É–∑–æ–∫ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
    const beforeStats = {
      suppliers: await prisma.supplier.count({
        where: {
          createdAt: {
            lt: today
          }
        }
      }),
      products: await prisma.product.count({
        where: {
          createdAt: {
            lt: today
          }
        }
      }),
      prices: await prisma.price.count({
        where: {
          createdAt: {
            lt: today
          }
        }
      }),
      uploads: await prisma.upload.count({
        where: {
          createdAt: {
            lt: today
          }
        }
      }),
      priceHistory: await prisma.priceHistory.count({
        where: {
          createdAt: {
            lt: today
          }
        }
      })
    };
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–æ–∫ (—Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ)
    const afterStats = {
      suppliers: await prisma.supplier.count(),
      products: await prisma.product.count(),
      prices: await prisma.price.count(),
      uploads: await prisma.upload.count(),
      priceHistory: await prisma.priceHistory.count()
    };
    
    // –í—ã—á–∏—Å–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const changes = {
      suppliers: afterStats.suppliers - beforeStats.suppliers,
      products: afterStats.products - beforeStats.products,
      prices: afterStats.prices - beforeStats.prices,
      uploads: afterStats.uploads - beforeStats.uploads,
      priceHistory: afterStats.priceHistory - beforeStats.priceHistory
    };
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –ó–ê–ì–†–£–ó–ö–ò (–¥–æ —Å–µ–≥–æ–¥–Ω—è):');
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${beforeStats.suppliers.toLocaleString()}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${beforeStats.products.toLocaleString()}`);
    console.log(`üí∞ –¶–µ–Ω—ã: ${beforeStats.prices.toLocaleString()}`);
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∏: ${beforeStats.uploads.toLocaleString()}`);
    console.log(`üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${beforeStats.priceHistory.toLocaleString()}`);
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò (—Ç–µ–∫—É—â–∞—è):');
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${afterStats.suppliers.toLocaleString()}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${afterStats.products.toLocaleString()}`);
    console.log(`üí∞ –¶–µ–Ω—ã: ${afterStats.prices.toLocaleString()}`);
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∏: ${afterStats.uploads.toLocaleString()}`);
    console.log(`üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${afterStats.priceHistory.toLocaleString()}`);
    
    console.log('\nüîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –û–¢ –ó–ê–ì–†–£–ó–ö–ò JULY 2025:');
    console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${changes.suppliers >= 0 ? '+' : ''}${changes.suppliers.toLocaleString()}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${changes.products >= 0 ? '+' : ''}${changes.products.toLocaleString()}`);
    console.log(`üí∞ –¶–µ–Ω—ã: ${changes.prices >= 0 ? '+' : ''}${changes.prices.toLocaleString()}`);
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∏: ${changes.uploads >= 0 ? '+' : ''}${changes.uploads.toLocaleString()}`);
    console.log(`üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${changes.priceHistory >= 0 ? '+' : ''}${changes.priceHistory.toLocaleString()}`);
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–æ—Å—Ç–∞
    console.log('\nüìà –ü–†–û–¶–ï–ù–¢–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï:');
    if (beforeStats.suppliers > 0) {
      const supplierGrowth = ((changes.suppliers / beforeStats.suppliers) * 100).toFixed(1);
      console.log(`üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${supplierGrowth}%`);
    }
    if (beforeStats.products > 0) {
      const productGrowth = ((changes.products / beforeStats.products) * 100).toFixed(1);
      console.log(`üì¶ –¢–æ–≤–∞—Ä—ã: ${productGrowth}%`);
    }
    if (beforeStats.prices > 0) {
      const priceGrowth = ((changes.prices / beforeStats.prices) * 100).toFixed(1);
      console.log(`üí∞ –¶–µ–Ω—ã: ${priceGrowth}%`);
    }
    
    // –î–µ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ó–ê–ì–†–£–ó–û–ö JULY 2025:');
    
    const todayUploads = await prisma.upload.findMany({
      where: {
        createdAt: {
          gte: today
        }
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });
    
    console.log(`üì§ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${todayUploads.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    const supplierGroups = todayUploads.reduce((acc, upload) => {
      const supplierName = upload.supplier.name;
      if (!acc[supplierName]) {
        acc[supplierName] = {
          files: 0,
          totalPrices: 0,
          statuses: []
        };
      }
      acc[supplierName].files++;
      acc[supplierName].totalPrices += upload._count.prices;
      acc[supplierName].statuses.push(upload.status);
      return acc;
    }, {});
    
    console.log('\nüè¢ –ó–ê–ì–†–£–ó–ö–ò –ü–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú:');
    Object.entries(supplierGroups)
      .sort(([,a], [,b]) => b.totalPrices - a.totalPrices)
      .forEach(([supplier, stats]) => {
        const successful = stats.statuses.filter(s => s === 'completed').length;
        console.log(`üìä ${supplier}:`);
        console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${stats.files} (${successful} —É—Å–ø–µ—à–Ω–æ)`);
        console.log(`   üí∞ –¢–æ–≤–∞—Ä–æ–≤: ${stats.totalPrices}`);
      });
    
    // –ù–æ–≤—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
    const newSuppliers = await prisma.supplier.findMany({
      where: {
        createdAt: {
          gte: today
        }
      },
      include: {
        _count: {
          select: {
            uploads: true,
            prices: true
          }
        }
      }
    });
    
    console.log('\nüÜï –ù–û–í–´–ï –ü–û–°–¢–ê–í–©–ò–ö–ò (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è):');
    if (newSuppliers.length > 0) {
      newSuppliers.forEach((supplier, index) => {
        console.log(`${index + 1}. ${supplier.name}`);
        console.log(`   üì§ –ó–∞–≥—Ä—É–∑–æ–∫: ${supplier._count.uploads}`);
        console.log(`   üí∞ –¢–æ–≤–∞—Ä–æ–≤: ${supplier._count.prices}`);
      });
    } else {
      console.log('üìù –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ (–∑–∞–≥—Ä—É–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const comparisonReport = {
      timestamp: new Date().toISOString(),
      analysisDate: today.toISOString(),
      before: beforeStats,
      after: afterStats,
      changes: changes,
      percentageGrowth: {
        suppliers: beforeStats.suppliers > 0 ? ((changes.suppliers / beforeStats.suppliers) * 100).toFixed(1) : 'N/A',
        products: beforeStats.products > 0 ? ((changes.products / beforeStats.products) * 100).toFixed(1) : 'N/A',
        prices: beforeStats.prices > 0 ? ((changes.prices / beforeStats.prices) * 100).toFixed(1) : 'N/A'
      },
      todayUploads: todayUploads.length,
      newSuppliers: newSuppliers.length,
      supplierBreakdown: supplierGroups
    };
    
    console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: comparison-before-after.json');
    require('fs').writeFileSync('comparison-before-after.json', JSON.stringify(comparisonReport, null, 2));
    
    return comparisonReport;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

compareBeforeAfter();
"use client";

import { useState, useEffect } from 'react';

interface ProcessingStep {
  id: string;
  name: string;
  status: 'pending' | 'processing' | 'completed' | 'error';
  message?: string;
  timestamp?: string;
  duration?: number;
}

interface ProcessingStatusProps {
  uploadId?: string;
  isProcessing: boolean;
  onComplete?: (success: boolean) => void;
}

export function ProcessingStatus({ uploadId, isProcessing, onComplete }: ProcessingStatusProps) {
  const [steps, setSteps] = useState<ProcessingStep[]>([
    { id: 'upload', name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞', status: 'pending' },
    { id: 'validation', name: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞', status: 'pending' },
    { id: 'extraction', name: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', status: 'pending' },
    { id: 'ai_processing', name: 'AI –æ–±—Ä–∞–±–æ—Ç–∫–∞', status: 'pending' },
    { id: 'batch_processing', name: '–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', status: 'pending' },
    { id: 'validation_ai', name: 'AI –≤–∞–ª–∏–¥–∞—Ü–∏—è', status: 'pending' },
    { id: 'storage', name: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', status: 'pending' }
  ]);

  const [currentStep, setCurrentStep] = useState<string>('upload');
  const [progress, setProgress] = useState(0);
  const [startTime, setStartTime] = useState<number | null>(null);
  const [logs, setLogs] = useState<string[]>([]);

  useEffect(() => {
    if (isProcessing && !startTime) {
      setStartTime(Date.now());
      setSteps(prev => prev.map(step => ({ ...step, status: 'pending' })));
      setProgress(0);
      setLogs([]);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
      updateStep('upload', 'completed', '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      setTimeout(() => {
        updateStep('validation', 'completed', '–§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        setCurrentStep('extraction');
        updateStep('extraction', 'processing', '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...');
      }, 1000);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç uploadId, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (!uploadId) {
        setTimeout(() => {
          updateStep('extraction', 'completed', '–î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
          setCurrentStep('ai_processing');
          updateStep('ai_processing', 'processing', 'AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ...');
        }, 3000);
        
        setTimeout(() => {
          updateStep('ai_processing', 'completed', 'AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          setCurrentStep('storage');
          updateStep('storage', 'processing', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
        }, 8000);
        
        setTimeout(() => {
          updateStep('storage', 'completed', '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
          setProgress(100);
          addLog('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
          onComplete?.(true);
        }, 10000);
      }
    }
  }, [isProcessing, startTime, uploadId]);

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  useEffect(() => {
    if (!uploadId || !isProcessing) return;

    const pollStatus = async () => {
      try {
        const response = await fetch(`/api/uploads/status/${uploadId}`);
        if (response.ok) {
          const data = await response.json();
          updateProgressFromStatus(data);
        }
      } catch (error) {
        console.error('Error polling status:', error);
        addLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ä–∞–∑—É
    pollStatus();
    
    // –ò –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(pollStatus, 2000);
    return () => clearInterval(interval);
  }, [uploadId, isProcessing]);

  const updateStep = (stepId: string, status: ProcessingStep['status'], message?: string) => {
    setSteps(prev => prev.map(step => 
      step.id === stepId 
        ? { 
            ...step, 
            status, 
            message,
            timestamp: new Date().toLocaleTimeString(),
            duration: startTime ? Date.now() - startTime : undefined
          }
        : step
    ));
    
    if (status === 'completed') {
      const stepIndex = steps.findIndex(s => s.id === stepId);
      setProgress(((stepIndex + 1) / steps.length) * 100);
    }
    
    if (message) {
      addLog(`${getStepIcon(status)} ${message}`);
    }
  };

  const updateProgressFromStatus = (uploadData: any) => {
    if (uploadData.status === 'processing') {
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (uploadData.totalRowsDetected && currentStep === 'extraction') {
        updateStep('extraction', 'completed', `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${uploadData.totalRowsDetected} –∑–∞–ø–∏—Å–µ–π`);
        setCurrentStep('ai_processing');
        updateStep('ai_processing', 'processing', '–ù–∞—á–∞–ª–∞—Å—å AI –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
      }
      
      // AI –æ–±—Ä–∞–±–æ—Ç–∫–∞
      if (uploadData.extractedData?.aiDecision && currentStep === 'ai_processing') {
        const aiDecision = uploadData.extractedData.aiDecision;
        updateStep('ai_processing', 'completed', `AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${aiDecision.products?.length || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
        
        if (aiDecision.products?.length > 50) {
          setCurrentStep('batch_processing');
          updateStep('batch_processing', 'processing', `–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${aiDecision.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...`);
        } else {
          setCurrentStep('validation_ai');
        }
      }
    } else if (uploadData.status === 'pending_review') {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
      updateStep('extraction', 'completed', `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${uploadData.totalRowsDetected || '–¥–∞–Ω–Ω—ã–µ'}`);
      updateStep('ai_processing', 'completed', `AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uploadData.totalRowsProcessed || 0} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
      updateStep('batch_processing', 'completed', '–ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      updateStep('validation_ai', 'completed', 'AI –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      updateStep('storage', 'completed', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      setProgress(100);
      addLog('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –∞–¥–º–∏–Ω–∫—É.');
      
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    } else if (uploadData.status === 'failed') {
      const currentStepData = steps.find(s => s.id === currentStep);
      if (currentStepData) {
        updateStep(currentStep, 'error', uploadData.errorMessage || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }
      addLog(`‚ùå –û—à–∏–±–∫–∞: ${uploadData.errorMessage || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      onComplete?.(false);
    }
  };

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const getStepIcon = (status: ProcessingStep['status']) => {
    switch (status) {
      case 'completed': return '‚úÖ';
      case 'processing': return 'üîÑ';
      case 'error': return '‚ùå';
      default: return '‚è≥';
    }
  };

  const getStepColor = (status: ProcessingStep['status']) => {
    switch (status) {
      case 'completed': return 'text-green-600';
      case 'processing': return 'text-blue-600';
      case 'error': return 'text-red-600';
      default: return 'text-gray-400';
    }
  };

  const formatDuration = (ms?: number) => {
    if (!ms) return '';
    return `(${Math.round(ms / 1000)}s)`;
  };

  if (!isProcessing && progress === 0) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
            –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
          </h3>
          <div className="text-sm text-gray-500">
            {progress.toFixed(0)}%
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="mb-6">
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        {/* –≠—Ç–∞–ø—ã */}
        <div className="space-y-3 mb-6">
          {steps.map((step, index) => (
            <div key={step.id} className="flex items-center space-x-3">
              <div className="flex-shrink-0">
                <span className={`text-lg ${getStepColor(step.status)}`}>
                  {getStepIcon(step.status)}
                </span>
              </div>
              <div className="flex-1">
                <div className={`font-medium ${getStepColor(step.status)}`}>
                  {step.name}
                </div>
                {step.message && (
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    {step.message} {formatDuration(step.duration)}
                  </div>
                )}
              </div>
              {step.timestamp && (
                <div className="text-xs text-gray-400">
                  {step.timestamp}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* –õ–æ–≥ */}
        {logs.length > 0 && (
          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥:
            </h4>
            <div className="space-y-1 max-h-40 overflow-y-auto">
              {logs.map((log, index) => (
                <div key={index} className="text-xs font-mono text-gray-600 dark:text-gray-400">
                  {log}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ) */}
        {(progress === 100 || steps.some(s => s.status === 'error')) && (
          <div className="mt-6 flex justify-end space-x-3">
            <button
              onClick={() => {
                window.location.reload();
              }}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
            <button
              onClick={() => onComplete?.(progress === 100)}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
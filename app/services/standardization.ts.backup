/**
 * Legacy standardization file - redirects to new implementation
 * @deprecated Use ./standardization/index.ts instead
 */

export { 
  standardizeProductData,
  standardizeUnit,
  generateStandardizedData,
  normalizePrice 
} from './standardization/index';

// Legacy exports for backward compatibility
export const standardizeProductName = (name: string): string => {
  const { generateStandardizedData } = require('./standardization/index');
  const result = generateStandardizedData(name);
  return result.standardizedName;
};

// Keep old mappings for reference only
const UNIT_MAPPINGS: Record<string, string> = {
  // Weight units
  'kg': 'kg',
  'kilo': 'kg',
  'kilogram': 'kg',
  'kilograms': 'kg',
  'gr': 'g',
  'gram': 'g',
  'grams': 'g',
  'lb': 'lb',
  'lbs': 'lb',
  'pound': 'lb',
  'pounds': 'lb',
  
  // Volume units
  'liter': 'l',
  'liters': 'l',
  'ltr': 'l',
  'ml': 'ml',
  'milliliter': 'ml',
  'milliliters': 'ml',
  'gal': 'gal',
  'gallon': 'gal',
  'gallons': 'gal',
  
  // Count units
  'piece': 'pcs',
  'pieces': 'pcs',
  'pcs': 'pcs',
  'pc': 'pcs',
  'unit': 'pcs',
  'units': 'pcs',
  'item': 'pcs',
  'items': 'pcs',
  'box': 'box',
  'boxes': 'box',
  'pack': 'pack',
  'packs': 'pack',
  'dozen': 'dozen',
  'doz': 'dozen',
  
  // Length units
  'meter': 'm',
  'meters': 'm',
  'mtr': 'm',
  'cm': 'cm',
  'centimeter': 'cm',
  'centimeters': 'cm',
  'mm': 'mm',
  'millimeter': 'mm',
  'millimeters': 'mm',
  'inch': 'in',
  'inches': 'in',
  'ft': 'ft',
  'foot': 'ft',
  'feet': 'ft',
  
  // Area units
  'sqm': 'sqm',
  'sq.m': 'sqm',
  'square meter': 'sqm',
  'square meters': 'sqm',
  'sqft': 'sqft',
  'sq.ft': 'sqft',
  'square foot': 'sqft',
  'square feet': 'sqft',
  
  // Other common units
  'sheet': 'sheet',
  'sheets': 'sheet',
  'roll': 'roll',
  'rolls': 'roll',
  'bottle': 'bottle',
  'bottles': 'bottle',
  'can': 'can',
  'cans': 'can',
  'jar': 'jar',
  'jars': 'jar',
  'bag': 'bag',
  'bags': 'bag',
  'sack': 'sack',
  'sacks': 'sack',
  'bundle': 'bundle',
  'bundles': 'bundle',
  'set': 'set',
  'sets': 'set',
  'pair': 'pair',
  'pairs': 'pair'
};

// Common product name variations to standardize
const PRODUCT_NAME_MAPPINGS: Record<string, string> = {
  // Vegetables
  'tomatoes': 'tomato',
  'potatoes': 'potato',
  'onions': 'onion',
  'carrots': 'carrot',
  'peppers': 'pepper',
  'cucumbers': 'cucumber',
  'lettuces': 'lettuce',
  'cabbages': 'cabbage',
  'broccolis': 'broccoli',
  'cauliflowers': 'cauliflower',
  'spinaches': 'spinach',
  'corns': 'corn',
  'beans': 'bean',
  'peas': 'pea',
  'eggplants': 'eggplant',
  'zucchinis': 'zucchini',
  'squashes': 'squash',
  'radishes': 'radish',
  'beets': 'beet',
  'celeries': 'celery',
  'asparaguses': 'asparagus',
  'artichokes': 'artichoke',
  'mushrooms': 'mushroom',
  'garlics': 'garlic',
  'gingers': 'ginger',
  'herbs': 'herb',
  'chilis': 'chili',
  'chillies': 'chili',
  
  // Fruits
  'apples': 'apple',
  'oranges': 'orange',
  'bananas': 'banana',
  'grapes': 'grape',
  'strawberries': 'strawberry',
  'blueberries': 'blueberry',
  'raspberries': 'raspberry',
  'blackberries': 'blackberry',
  'peaches': 'peach',
  'plums': 'plum',
  'pears': 'pear',
  'cherries': 'cherry',
  'apricots': 'apricot',
  'mangoes': 'mango',
  'mangos': 'mango',
  'pineapples': 'pineapple',
  'watermelons': 'watermelon',
  'melons': 'melon',
  'kiwis': 'kiwi',
  'papayas': 'papaya',
  'avocados': 'avocado',
  'lemons': 'lemon',
  'limes': 'lime',
  'coconuts': 'coconut',
  'dates': 'date',
  'figs': 'fig',
  'pomegranates': 'pomegranate',
  
  // Meat & Poultry
  'chickens': 'chicken',
  'beefs': 'beef',
  'porks': 'pork',
  'lambs': 'lamb',
  'fishes': 'fish',
  'salmons': 'salmon',
  'tunas': 'tuna',
  'shrimps': 'shrimp',
  'prawns': 'prawn',
  'crabs': 'crab',
  'lobsters': 'lobster',
  'squids': 'squid',
  'octopuses': 'octopus',
  'mussels': 'mussel',
  'oysters': 'oyster',
  'clams': 'clam',
  'scallops': 'scallop',
  
  // Dairy
  'milks': 'milk',
  'cheeses': 'cheese',
  'yogurts': 'yogurt',
  'butters': 'butter',
  'creams': 'cream',
  'eggs': 'egg',
  
  // Grains & Pasta
  'rices': 'rice',
  'wheats': 'wheat',
  'flours': 'flour',
  'breads': 'bread',
  'pastas': 'pasta',
  'noodles': 'noodle',
  'cereals': 'cereal',
  'oats': 'oat',
  
  // Common variations
  'veggie': 'vegetable',
  'veggies': 'vegetable',
  'veg': 'vegetable'
};

// Commented out - using the one from standardization/index.ts instead
// /**
//  * Standardize unit to consistent format
//  */
// export function standardizeUnit(unit: string): string {
//   if (!unit) return 'pcs';
//   
//   const normalized = unit.toLowerCase().trim();
//   
//   // Check exact match first
//   if (UNIT_MAPPINGS[normalized]) {
//     return UNIT_MAPPINGS[normalized];
//   }
//   
//   // Try removing trailing dots
//   const withoutDot = normalized.replace(/\.$/, '');
//   if (UNIT_MAPPINGS[withoutDot]) {
//     return UNIT_MAPPINGS[withoutDot];
//   }
//   
//   // Try to extract number + unit (e.g., "1kg" -> "kg")
//   const match = normalized.match(/^\d+\s*(.+)$/);
//   if (match) {
//     const extractedUnit = match[1];
//     if (UNIT_MAPPINGS[extractedUnit]) {
//       return UNIT_MAPPINGS[extractedUnit];
//     }
//   }
//   
//   // Default to the original if no mapping found
//   return normalized;
// }

/**
 * Standardize product name to consistent format
 * Rules:
 * 1. Convert to lowercase
 * 2. Singular form
 * 3. Noun first, then characteristics
 * 4. Remove special characters
 * 5. Standardize common variations
 */
export function standardizeProductName(name: string): string {
  if (!name) return '';
  
  // Convert to lowercase and trim
  let standardized = name.toLowerCase().trim();
  
  // Remove special characters except spaces and hyphens
  standardized = standardized.replace(/[^\w\s-]/g, '');
  
  // Extract size/volume if present in the name
  let sizeInName = '';
  const sizeMatch = standardized.match(/(\d+\s*(?:ml|l|g|kg|gr|mg|oz))\b/i);
  if (sizeMatch) {
    sizeInName = sizeMatch[1].replace(/\s+/g, '');
    // Remove the size from the name for now
    standardized = standardized.replace(sizeMatch[0], '').trim();
  }
  
  // Split into words
  const words = standardized.split(/\s+/).filter(word => word.length > 0);
  
  if (words.length === 0) return '';
  
  // Process each word for plural to singular conversion
  const processedWords = words.map(word => {
    // Check if word has a known mapping
    if (PRODUCT_NAME_MAPPINGS[word]) {
      return PRODUCT_NAME_MAPPINGS[word];
    }
    
    // Simple plural to singular rules
    if (word.endsWith('ies') && word.length > 3) {
      // berries -> berry, cherries -> cherry
      return word.slice(0, -3) + 'y';
    } else if (word.endsWith('es') && word.length > 2) {
      // tomatoes -> tomato, potatoes -> potato
      if (word.endsWith('oes')) {
        return word.slice(0, -2);
      }
      // boxes -> box, matches -> match
      return word.slice(0, -2);
    } else if (word.endsWith('s') && word.length > 1 && !word.endsWith('ss')) {
      // apples -> apple, but not class -> clas
      return word.slice(0, -1);
    }
    
    return word;
  });
  
  // Reorder words: noun first, then characteristics
  // Common characteristics that should come after the noun
  const characteristics = ['red', 'green', 'yellow', 'blue', 'white', 'black', 'brown', 'orange', 'purple', 'pink',
                          'fresh', 'frozen', 'dried', 'canned', 'organic', 'local', 'imported', 'premium', 'regular',
                          'large', 'small', 'medium', 'big', 'tiny', 'jumbo', 'mini',
                          'sweet', 'sour', 'spicy', 'mild', 'hot',
                          'whole', 'sliced', 'diced', 'chopped', 'ground', 'minced', 'crushed',
                          'raw', 'cooked', 'grilled', 'fried', 'baked', 'roasted', 'steamed', 'boiled',
                          'seedless', 'boneless', 'skinless', 'pitted',
                          'ripe', 'unripe', 'mature', 'young', 'baby',
                          'grade', 'type', 'variety'];
  
  const isCharacteristic = (word: string) => characteristics.includes(word);
  
  // Separate nouns and characteristics
  const nouns: string[] = [];
  const attrs: string[] = [];
  
  processedWords.forEach(word => {
    if (isCharacteristic(word)) {
      attrs.push(word);
    } else {
      nouns.push(word);
    }
  });
  
  // Reconstruct: nouns first, then characteristics
  let reordered = [...nouns, ...attrs];
  
  // Special handling for known patterns like "mango yogurt" -> "yogurt mango"
  if (reordered.length === 2) {
    const [first, second] = reordered;
    
    // Check if we have a flavor/modifier + main product pattern
    const mainProducts = ['yogurt', 'milk', 'juice', 'cheese', 'bread', 'rice', 'pasta', 'sauce', 
                         'soup', 'cream', 'butter', 'oil', 'tea', 'coffee', 'water', 'soda'];
    const modifiers = ['mango', 'strawberry', 'vanilla', 'chocolate', 'banana', 'apple', 'orange',
                      'grape', 'berry', 'cherry', 'peach', 'lemon', 'lime', 'coconut'];
    
    if (modifiers.includes(first) && mainProducts.includes(second)) {
      // Swap them to put main product first
      reordered = [second, first];
    }
  }
  
  // Add size back at the end if it was in the original name
  const finalName = reordered.join(' ');
  return sizeInName ? `${finalName} ${sizeInName}` : finalName;
}

/**
 * Generate standardized name from raw name
 * Returns both the standardized name and standardized unit
 */
export function generateStandardizedData(rawName: string, rawUnit?: string): { standardizedName: string; standardizedUnit: string } {
  const standardizedName = standardizeProductName(rawName);
  const standardizedUnit = standardizeUnit(rawUnit || 'pcs');
  
  return {
    standardizedName,
    standardizedUnit
  };
}
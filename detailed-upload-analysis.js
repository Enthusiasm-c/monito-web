const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_h6GaENYK1qSs@ep-summer-shape-a1r1yz39-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require'
    }
  }
});

async function detailedUploadAnalysis() {
  try {
    console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–ì–†–£–ó–û–ö –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
    console.log('=' .repeat(70));
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const last24Hours = new Date();
    last24Hours.setHours(last24Hours.getHours() - 24);
    
    const recentUploads = await prisma.upload.findMany({
      where: {
        createdAt: {
          gte: last24Hours
        }
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${recentUploads.length}`);
    
    if (recentUploads.length > 0) {
      console.log('\nüìã –î–ï–¢–ê–õ–ò –ù–ï–î–ê–í–ù–ò–• –ó–ê–ì–†–£–ó–û–ö:');
      recentUploads.forEach((upload, index) => {
        console.log(`\n${index + 1}. ${upload.originalName || upload.fileName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`);
        console.log(`   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${upload.supplier.name}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${upload.status}`);
        console.log(`   üí∞ –¢–æ–≤–∞—Ä–æ–≤: ${upload._count.prices}`);
        console.log(`   üìÖ –í—Ä–µ–º—è: ${upload.createdAt.toLocaleString()}`);
        console.log(`   üÜî ID: ${upload.id}`);
        if (upload.errorMessage) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${upload.errorMessage}`);
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ July 2025
    console.log('\nüîç –ü–û–ò–°–ö –ó–ê–ì–†–£–ó–û–ö JULY 2025 –ü–û –ò–ú–ï–ù–ê–ú –§–ê–ô–õ–û–í:');
    
    const july2025Keywords = [
      'britts', 'seafood', 'dairy', 'benoa', 'berkah', 'alam sari',
      'cheese', 'gloria', 'happy farm', 'meat mart', 'milk up',
      'gioa', 'raja boga', 'pangan', 'puri', 'bali boga', 'pasti enak',
      'sai fresh', 'siap bali', 'oz britts', 'shy cow', 'local parts'
    ];
    
    const possibleJuly2025Uploads = await prisma.upload.findMany({
      where: {
        OR: july2025Keywords.map(keyword => ({
          OR: [
            { originalName: { contains: keyword, mode: 'insensitive' } },
            { fileName: { contains: keyword, mode: 'insensitive' } },
            { supplier: { name: { contains: keyword, mode: 'insensitive' } } }
          ]
        }))
      },
      include: {
        supplier: true,
        _count: {
          select: {
            prices: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 20
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ July 2025: ${possibleJuly2025Uploads.length}`);
    
    if (possibleJuly2025Uploads.length > 0) {
      console.log('\nüìã –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ó–ê–ì–†–£–ó–ö–ò JULY 2025:');
      possibleJuly2025Uploads.forEach((upload, index) => {
        console.log(`${index + 1}. ${upload.originalName || upload.fileName || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${upload.supplier.name})`);
        console.log(`   üìÖ ${upload.createdAt.toLocaleDateString()} | üí∞ ${upload._count.prices} —Ç–æ–≤–∞—Ä–æ–≤ | üìä ${upload.status}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–û–ö:');
    
    const totalUploads = await prisma.upload.count();
    const completedUploads = await prisma.upload.count({ where: { status: 'completed' } });
    const failedUploads = await prisma.upload.count({ where: { status: 'failed' } });
    const processingUploads = await prisma.upload.count({ where: { status: 'processing' } });
    
    console.log(`üì§ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${totalUploads}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedUploads}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedUploads}`);
    console.log(`‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${processingUploads}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    console.log('\nüìÖ –ó–ê–ì–†–£–ó–ö–ò –ü–û –î–ê–¢–ê–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):');
    
    for (let i = 0; i < 7; i++) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      date.setHours(0, 0, 0, 0);
      const nextDate = new Date(date);
      nextDate.setDate(nextDate.getDate() + 1);
      
      const dayUploads = await prisma.upload.count({
        where: {
          createdAt: {
            gte: date,
            lt: nextDate
          }
        }
      });
      
      if (dayUploads > 0) {
        console.log(`üìÖ ${date.toLocaleDateString()}: ${dayUploads} –∑–∞–≥—Ä—É–∑–æ–∫`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    console.log('\nüè¢ –¢–û–ü-10 –ü–û–°–¢–ê–í–©–ò–ö–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ó–ê–ì–†–£–ó–û–ö:');
    
    const supplierStats = await prisma.supplier.findMany({
      include: {
        _count: {
          select: {
            uploads: true,
            prices: true
          }
        }
      },
      orderBy: {
        uploads: {
          _count: 'desc'
        }
      },
      take: 10
    });
    
    supplierStats.forEach((supplier, index) => {
      console.log(`${index + 1}. ${supplier.name}: ${supplier._count.uploads} –∑–∞–≥—Ä—É–∑–æ–∫, ${supplier._count.prices} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ uploads
    console.log('\n‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ê–ù–û–ú–ê–õ–ò–ô:');
    
    const stuckUploads = await prisma.upload.findMany({
      where: {
        status: 'processing',
        createdAt: {
          lt: new Date(Date.now() - 10 * 60 * 1000) // –°—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
        }
      },
      include: {
        supplier: true
      }
    });
    
    if (stuckUploads.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${stuckUploads.length} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫:`);
      stuckUploads.forEach(upload => {
        console.log(`   ${upload.originalName || upload.fileName} (${upload.supplier.name}) - ${upload.createdAt.toLocaleString()}`);
      });
    } else {
      console.log('‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    return {
      recentUploads: recentUploads.length,
      july2025Uploads: possibleJuly2025Uploads.length,
      totalUploads,
      completedUploads,
      failedUploads,
      stuckUploads: stuckUploads.length
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–æ–∫:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

detailedUploadAnalysis();
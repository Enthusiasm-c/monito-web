#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
import os
import asyncio
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from metrics_collector import (
    start_processing,
    record_ocr_completion,
    record_api_completion,
    record_financial_summary,
    record_error,
    finish_processing,
    get_statistics,
    add_user_restaurant_mapping
)

def test_basic_monitoring():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("\nüìä –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã")
    user_id = 123456789
    restaurant_name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
    add_user_restaurant_mapping(user_id, restaurant_name)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    metrics = start_processing(user_id)
    print(f"‚úÖ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É
    import time
    time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    record_ocr_completion(
        user_id=user_id,
        duration=0.8,
        products_count=5,
        confidence=0.95,
        supplier_name="Supplier ABC",
        invoice_date="2024-01-15"
    )
    print("‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    time.sleep(0.3)
    record_api_completion(
        user_id=user_id,
        duration=1.2,
        products_compared=5,
        products_not_found=1
    )
    print("‚úÖ API —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
    record_financial_summary(
        user_id=user_id,
        total_amount=1500.50,
        total_savings=150.25,
        savings_percentage=10.0
    )
    print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    final_metrics = finish_processing(user_id)
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {final_metrics.total_duration:.2f}s")
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—à–∏–±–∫–æ–π
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—à–∏–±–∫–æ–π")
    user_id_2 = 987654321
    add_user_restaurant_mapping(user_id_2, "–†–µ—Å—Ç–æ—Ä–∞–Ω —Å –æ—à–∏–±–∫–æ–π")
    
    metrics_2 = start_processing(user_id_2)
    time.sleep(0.2)
    record_error(user_id_2, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    final_metrics_2 = finish_processing(user_id_2)
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—à–∏–±–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {final_metrics_2.total_duration:.2f}s")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìà –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    stats = get_statistics(days=1)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 1 –¥–µ–Ω—å:")
    print(json.dumps(stats, indent=2, ensure_ascii=False))
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def test_concurrent_processing():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—á–µ—Ç–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    user_ids = [111, 222, 333, 444, 555]
    restaurants = [
        "–†–µ—Å—Ç–æ—Ä–∞–Ω Alpha",
        "–ö–∞—Ñ–µ Beta", 
        "–ë–∏—Å—Ç—Ä–æ Gamma",
        "–°—Ç–æ–ª–æ–≤–∞—è Delta",
        "–ë—É—Ñ–µ—Ç Epsilon"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
    for user_id, restaurant in zip(user_ids, restaurants):
        add_user_restaurant_mapping(user_id, restaurant)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    metrics_list = []
    for user_id in user_ids:
        metrics = start_processing(user_id)
        metrics_list.append(metrics)
    
    print(f"‚úÖ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    import random
    import time
    
    for i, user_id in enumerate(user_ids):
        time.sleep(random.uniform(0.1, 0.3))
        
        # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫—É
        if random.random() > 0.2:  # 80% —É—Å–ø–µ—à–Ω—ã—Ö
            record_ocr_completion(user_id, random.uniform(0.5, 2.0), 
                                random.randint(3, 10), random.uniform(0.8, 0.98))
            record_api_completion(user_id, random.uniform(0.8, 1.5), 
                                random.randint(3, 10), random.randint(0, 2))
            record_financial_summary(user_id, random.uniform(500, 2000), 
                                   random.uniform(50, 200), random.uniform(5, 15))
        else:  # 20% —Å –æ—à–∏–±–∫–∞–º–∏
            record_error(user_id, "–°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ")
        
        finish_processing(user_id)
    
    print("‚úÖ –í—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    final_stats = get_statistics(days=1)
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {final_stats.get('total_sessions', 0)}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {final_stats.get('successful_sessions', 0)}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {final_stats.get('success_rate', 0):.1f}%")
    print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {final_stats.get('average_duration', 0):.2f}s")
    
    return final_stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –±–æ—Ç–∞ - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        test_basic_monitoring()
        
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_concurrent_processing()
        
        print("\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)